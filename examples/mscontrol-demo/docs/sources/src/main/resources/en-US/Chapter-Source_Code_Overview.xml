<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter
	id="source_code_overview">

	<title>Source Code Overview</title>

	<para>The example application is defined by a service descriptor, which refers the included root SBB. </para>

	<important>
		<para>
			To obtain the example's complete source code please refer to
			<xref
				linkend="source_code" />
			.
		</para>
	</important>

	<section
		id="service_descriptor">

		<title>Service Descriptor</title>

		<para>The service descriptor is plain simple, it just defines the service ID, the ID of the root SBB and its default priority. The
			complete XML is:</para>

		<programlisting
			language="XML"
			role="XML"><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE service-xml PUBLIC 
	"-//Sun Microsystems, Inc.//DTD JAIN SLEE Service 1.1//EN"
    "http://java.sun.com/dtd/slee-service-xml_1_1.dtd">
<service-xml>
    <service>
        <service-name>MsControlDemo</service-name>
        <service-vendor>org.mobicents</service-vendor>
        <service-version>1.0</service-version>
        <root-sbb>
            <sbb-name>CallSbb</sbb-name>
            <sbb-vendor>org.mobicents</sbb-vendor>
            <sbb-version>1.0</sbb-version>
        </root-sbb>
        <default-priority>0</default-priority>
    </service>
</service-xml>

		]]>
		</programlisting>

	</section>
	<section
		id="root_sbb_descriptor">
		<title>Root SBB XML Descriptor</title>
		<para>The Root SBB XML Descriptor has to be provided and match the abstract class code.</para>

		<para>
			First relevant part is the declaration of the
			<literal>sbb-classes</literal>
			element, where the sbb class abstract name must be specified, along with the cmp fields and child relation.:
		</para>
		<programlisting
			language="XML"
			role="XML"><![CDATA[

        <sbb-classes>
            <sbb-abstract-class>
                <sbb-abstract-class-name>org.mobicents.slee.example.msc.CallSbb</sbb-abstract-class-name>
            </sbb-abstract-class>
        </sbb-classes>
			]]>
			</programlisting>

		<para>Then the events handled by the SBB must be specified too:</para>
		<programlisting
			language="XML"
			role="XML"><![CDATA[
<event event-direction="Receive" initial-event="True">
            <event-name>Invite</event-name>
            <event-type-ref>
                <event-type-name>javax.sip.message.Request.INVITE</event-type-name>
                <event-type-vendor>net.java.slee</event-type-vendor>
                <event-type-version>1.2</event-type-version>
            </event-type-ref>
            <initial-event-select variable="ActivityContext" />
        </event>
        <event event-direction="Receive" initial-event="False">
            <event-name>AnswerGenerated</event-name>
            <event-type-ref>
                <event-type-name>javax.media.mscontrol.networkconnection.SdpPortManagerEvent.ANSWER_GENERATED</event-type-name>
                <event-type-vendor>org.mobicents</event-type-vendor>
                <event-type-version>1.0</event-type-version>
            </event-type-ref>
        </event>
        <event event-direction="Receive" initial-event="False">
            <event-name>StreamFailure</event-name>
            <event-type-ref>
                <event-type-name>javax.media.mscontrol.networkconnection.SdpPortManagerEvent.NETWORK_STREAM_FAILURE</event-type-name>
                <event-type-vendor>org.mobicents</event-type-vendor>
                <event-type-version>1.0</event-type-version>
            </event-type-ref>
        </event>
        
        <event event-direction="Receive" initial-event="False">
            <event-name>Joined</event-name>
            <event-type-ref>
                <event-type-name>javax.media.mscontrol.join.JoinEvent.JOINED</event-type-name>
                <event-type-vendor>org.mobicents</event-type-vendor>
                <event-type-version>1.0</event-type-version>
            </event-type-ref>
        </event>
        
        <event event-direction="Receive" initial-event="False">
            <event-name>AnnouncementCompleted</event-name>
            <event-type-ref>
                <event-type-name>javax.media.mscontrol.mediagroup.PlayerEvent.PLAY_COMPLETED</event-type-name>
                <event-type-vendor>org.mobicents</event-type-vendor>
                <event-type-version>1.0</event-type-version>
            </event-type-ref>
        </event>
        
        <event event-direction="Receive" initial-event="False">
            <event-name>Disconnect</event-name>
            <event-type-ref>
                <event-type-name>javax.sip.Dialog.BYE</event-type-name>
                <event-type-vendor>net.java.slee</event-type-vendor>
                <event-type-version>1.2</event-type-version>
            </event-type-ref>
        </event>
			]]>
			</programlisting>

		<para>Finally, the  Resource Adaptors must be specified also, otherwise SLEE won't put its SBB Interface in the SBB's JNDI Context:
		</para>
		<programlisting
			language="XML"
			role="XML"><![CDATA[
 <resource-adaptor-type-binding>
            <resource-adaptor-type-ref>
                <resource-adaptor-type-name>
					JAIN SIP
                </resource-adaptor-type-name>
                <resource-adaptor-type-vendor>
					javax.sip
                </resource-adaptor-type-vendor>
                <resource-adaptor-type-version>
					1.2
                </resource-adaptor-type-version>
            </resource-adaptor-type-ref>
            <activity-context-interface-factory-name>
				slee/resources/jainsip/1.2/acifactory
            </activity-context-interface-factory-name>
            <resource-adaptor-entity-binding>
                <resource-adaptor-object-name>
					slee/resources/jainsip/1.2/provider
                </resource-adaptor-object-name>
                <resource-adaptor-entity-link>
					SipRA
                </resource-adaptor-entity-link>
            </resource-adaptor-entity-binding>
        </resource-adaptor-type-binding>
        <resource-adaptor-type-binding>
            <resource-adaptor-type-ref>
                <resource-adaptor-type-name>
					MSC-1.0-RA
                </resource-adaptor-type-name>
                <resource-adaptor-type-vendor>
					org.mobicents
                </resource-adaptor-type-vendor>
                <resource-adaptor-type-version>
					1.0
                </resource-adaptor-type-version>
            </resource-adaptor-type-ref>
            <activity-context-interface-factory-name>
				slee/resources/media/1.0/acifactory
            </activity-context-interface-factory-name>
            <resource-adaptor-entity-binding>
                <resource-adaptor-object-name>
					slee/resources/media/1.0/provider
                </resource-adaptor-object-name>
                <resource-adaptor-entity-link>
					MSCRA
                </resource-adaptor-entity-link>
            </resource-adaptor-entity-binding>
        </resource-adaptor-type-binding>
			]]>
			</programlisting>

	</section>


	<section
		id="root_sbb_abstract_class">
		<title>The Root SBB Abstract Class</title>
		<para>
			The class
			<literal>org.mobicents.slee.example.msc.CallSbb</literal>
			includes all the service logic for the example.
		</para>

		<section
			id="root_sbb_abstract_class_setSbbContext">
			<title>The setSbbContext(SbbContext) method</title>
			<para>
				The
				<literal>javax.slee.SbbObject</literal>
				's
				<literal>setSbbContext(SbbContext)</literal>
				is used by SBBs to store the SBB's context into a class field. The SBB should take the opportunity to also store objects, such as SLEE
				facilities, which are reused by all service logic entities, a.k.a. SbbEntities, and are stored in the JNDI environment.
			</para>

			<para>
				The class fields and
				<literal>setSbbContext(SbbContext)</literal>
				method's and related code:
			</para>
			<programlisting
				language="Java"
				role="JAVA"><![CDATA[
	public final static String JBOSS_BIND_ADDRESS = System.getProperty("jboss.bind.address", "127.0.0.1");
	public final static String WELCOME = "http://" + JBOSS_BIND_ADDRESS + ":8080/mscontrol/audio/RQNT-ULAW.wav";

	public final static String ENDPOINT_NAME = "/mobicents/media/IVR/$";

	protected static int CALL_ID_GEN = 1;
	protected static int GEN = 1000;
	protected SbbContext sbbContext;
	protected Tracer tracer;
	protected SleeSipProvider sipProvider;
	protected AddressFactory addressFactory;
	protected HeaderFactory headerFactory;
	protected MessageFactory messageFactory;
	protected SipActivityContextInterfaceFactory acif;
	private MsControlFactory mscFactory;
	private MscActivityContextInterfaceFactory mscAcifFactory;
	
	public void setSbbContext(SbbContext sbbContext) {
		this.sbbContext = sbbContext;
		this.tracer = sbbContext.getTracer("MS-Control-DEMO");
		try {
			Context ctx = (Context) new InitialContext().lookup("java:comp/env");

			// initialize SIP API
			sipProvider = (SleeSipProvider) ctx.lookup("slee/resources/jainsip/1.2/provider");
			acif = (SipActivityContextInterfaceFactory) ctx.lookup("slee/resources/jainsip/1.2/acifactory");
			messageFactory = sipProvider.getMessageFactory();
			headerFactory = sipProvider.getHeaderFactory();
			addressFactory = sipProvider.getAddressFactory();

			mscFactory = (MsControlFactory) ctx.lookup("slee/resources/media/1.0/provider");
			mscAcifFactory = (MscActivityContextInterfaceFactory) ctx.lookup("slee/resources/media/1.0/acifactory");
		} catch (Exception ne) {
			tracer.severe("Could not set SBB context:", ne);
		}
	}
            	]]>
            	</programlisting>
		</section>

		

		<section
			id="root_sbb_abstract_class_message_event_handler">
			<title>The SIP INVITE event handler</title>
			<para>The SIP INVITE is the starting point of each this example, its responsibility is:</para>

			<itemizedlist>
				<listitem>
					<para>Create <literal>DialogActivity</literal> and send provisional response.</para>
				</listitem>
				<listitem>
					<para>Create <literal>MediaSession</literal> object. Session is container for all <literal>MS Control</literal> objects. It is not activity.
					</para>
				</listitem>
				<listitem>
					<para>Create <literal>NetworkConnection</literal> activity and attach to it. Inititiate <literal>SDP</literal> processing on activity.</para>
				</listitem>
			</itemizedlist>

			<para>The event handler code:</para>
			<programlisting
				language="Java"
				role="JAVA"><![CDATA[
	public void onInvite(RequestEvent event, ActivityContextInterface aci) {
		tracer.info("Receive call ");

		Request request = event.getRequest();

		// sending provisional response to the UA which indiactes that initial
		// request
		// successfuly reach call controller and is going to be handled
		try {
			Response response = messageFactory.createResponse(Response.TRYING, request);
			event.getServerTransaction().sendResponse(response);
		} catch (Exception e) {
			// Can not send provisional response? Forget about this request.
			return;
		}

		// Provisional response sent so possible to obtain SIP Dialog activity
		// and attach this
		// SBB to the Dialog activity. Dialog activity can be used to maintain
		// current state too.
		ActivityContextInterface callActivity = null;
		try {
			Dialog dialog = sipProvider.getNewDialog(event.getServerTransaction());
			dialog.terminateOnBye(true);
			callActivity = acif.getActivityContextInterface((DialogActivity) dialog);
			callActivity.attach(sbbContext.getSbbLocalObject());
		} catch (Exception e) {
			// oops, this is unexpected core problem. there is only one way -
			// terminate call
			tracer.severe("Unexpected error", e);
			reject();
			return;
		}
		MediaSession session = null;
		try {
			session = mscFactory.createMediaSession();
		} catch (MsControlException e) {
			tracer.severe("Unexpected error", e);
			reject();
			return;
		}

		tracer.info("Created media session: " + session);
		NetworkConnection connection = null;
		try {
			connection = session.createNetworkConnection(NetworkConnection.BASIC);
		} catch (MsControlException e) {
			tracer.severe("Unexpected error", e);
			reject();
			return;
		}

		tracer.info("Created network connection: " + connection);
		// creating media connection activity context interface
		ActivityContextInterface activityContextInterface = null;
		try {
			activityContextInterface = mscAcifFactory.getActivityContextInterface(connection);
			activityContextInterface.attach(sbbContext.getSbbLocalObject());
		} catch (Exception e) {
			tracer.severe("Unexpected error", e);
			reject();
			return;
		}

		SdpPortManager sdpManager = null;
		try {
			sdpManager = connection.getSdpPortManager();
		} catch (MsControlException e) {
		}

		tracer.info("SDP Manager: " + sdpManager);
		try {
			sdpManager.processSdpOffer((byte[]) request.getContent());
			tracer.info("SDP Manager: sent process offer request");
		} catch (SdpPortManagerException e) {
		}
	}
            	]]>
				</programlisting>
		</section>

		<section
			id="root_sbb_abstract_class_answer_generated_handler">
			<title>The AnswerGenerated handler</title>
			<para>The <literal>MS Control</literal> AnswerGenerated is sent when Media Server successfully processes <literal>SDP</literal> offer. Event handler code responsibilities are:</para>

			<itemizedlist>
				<listitem>
					<para>Send <literal>SDP</literal> offer back to call initiating peer.</para>
				</listitem>
				<listitem>
					<para>Create <literal>MediaGroup</literal> activity and attach to it.</para>
				</listitem>
				<listitem>
					<para>Join <literal>MediaGroup</literal> and <literal>NetworkConnection</literal>.</para>
				</listitem>
			</itemizedlist>

			<para>The event handler code:</para>
			<programlisting
				language="Java"
				role="JAVA"><![CDATA[
	public void onAnswerGenerated(SdpPortManagerEvent evt, ActivityContextInterface aci) {
		tracer.info("Received SDP answer:");
		byte[] sdp = evt.getMediaServerSdp();

		ContentTypeHeader contentType = null;
		try {
			contentType = headerFactory.createContentTypeHeader("application", "sdp");
		} catch (ParseException ex) {
		}

		String localAddress = sipProvider.getListeningPoints()[0].getIPAddress();
		int localPort = sipProvider.getListeningPoints()[0].getPort();

		Address contactAddress = null;
		try {
			contactAddress = addressFactory.createAddress("sip:" + localAddress + ":" + localPort);
		} catch (ParseException ex) {
		}
		ContactHeader contact = headerFactory.createContactHeader(contactAddress);

		try {
			ServerTransaction st = getServerTransaction();
			
			Response ok = messageFactory.createResponse(Response.OK, st.getRequest(), contentType, sdp);
			ok.setHeader(contact);
			st.sendResponse(ok);
			// provider.sendResponse(ok);
		} catch (Exception e) {
			tracer.info("Can not send SIP response: ", e);
		}

		joinInitiate();
	}

	private void joinInitiate() {
		try {
			NetworkConnection connection = null;
			MediaSession session = connection.getMediaSession();
			MediaGroup ivr = session.createMediaGroup(MediaGroup.PLAYER_RECORDER_SIGNALDETECTOR);
			connection.joinInitiate(Direction.DUPLEX, ivr, "context");
			ActivityContextInterface activityContextInterface = mscAcifFactory.getActivityContextInterface(ivr);
			activityContextInterface.attach(sbbContext.getSbbLocalObject());
			
		} catch (Exception e) {
			tracer.severe("Unable to initiate join: ", e);
		}
	}

            	]]>
				</programlisting>
		</section>
		<section
			id="root_sbb_abstract_class_join_event_handler">
			<title>The JoinEvent handler</title>
			<para>The <literal>MS Control</literal> JoinEvent is sent when Media Server controller joins resources . Event handler code responsibilities are:</para>

			<itemizedlist>
				<listitem>
					<para>Request media playbeck from group player.</para>
				</listitem>

			</itemizedlist>

			<para>The event handler code:</para>
			<programlisting
				language="Java"
				role="JAVA"><![CDATA[
public void onJoined(JoinEvent event, ActivityContextInterface aci) {
		tracer.info("**** LOCAL CONNECION WAS CREATED");

		URI uri = null;
		try {
			uri = new URI(WELCOME);
			getMediaGroup().getPlayer().play(uri, null, null);
		} catch (Exception e) {
			tracer.severe("Unexpected error", e);
		}
	}

            	]]>
				</programlisting>
		</section>
	</section>

</chapter>

