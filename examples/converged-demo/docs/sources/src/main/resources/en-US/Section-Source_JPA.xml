<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="source_jpa">
	<title>JPA</title>
	<note>
		<para>Please refer to <acronym>JPA</acronym> guide for deeper knowledge of inner workings.</para>
	</note>
	<para>As described in <xref linkend="design_jpa"/> <acronym>JPA</acronym> builds abstraction layer over database content. It allows <acronym>POJO</acronym> access to 
	backend storage - that includes access to simple table and multiple table relational data.</para>
	<para>&THIS.EXAMPLE; Example defines following <literal>entity</literal> beans: </para>
	<variablelist>
		<varlistentry>
			<term>Order
			</term>
			<listitem>
				<para>represents order placed by certain customer, it allows access to order data, customer and ordered products details.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>OrderLine</term>
			<listitem>
				<para>represents item ordered in certain order, it allows access to order, product(item), </para>
			</listitem>
		</varlistentry>
		<varlistentry>
		<term>Customer</term>
			<listitem>
				<para>represents customer data.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>User
			</term>
			<listitem>
				<para>represents super set of customer information.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Category
			</term>
			<listitem>
				<para>represents product category.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Inventory
			</term>
			<listitem>
				<para>represents shop inventory, it allows access to products quantity,sold count and product itself</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Actor</term>
			<listitem>
				<para>represents <acronym>VIP</acronym> which is known to be owner of certain item, it allows access to actors data and products he owns.</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<note><para>In <acronym>ERD</acronym> diagram in <xref linkend="design_jpa"/> there is no table <literal>Users</literal>, instead there is <literal>Customer</literal> table. 
	That is because Customer extends User, <acronym>JPA</acronym> is aware of that and merged definition of both into single table.</para></note>
	<para>Beans are mapped to certain table by annotations, also their values are mapped to table columns it the same way. For instance Order bean is defined in following way: </para>
	<programlisting language="Java" role="JAVA">
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;


@Entity   //Mark as entity bean - that is its state is equivalent of table values
@Table(name="ORDERS")  //Map this bean to table
public class Order
    implements Serializable
{
    private static final long serialVersionUID = -5451107485769007079L;

    public enum Status {OPEN,CANCELLED,PROCESSING,SHIPPED}

    public static BigDecimal TAX_RATE = new BigDecimal(".0825");
	
	//simple values, those are injected from table
    long orderId;
    Date orderDate;
    Timestamp deliveryDate;
    BigDecimal netAmount = BigDecimal.ZERO;
    BigDecimal tax = BigDecimal.ZERO;
    BigDecimal totalAmount = BigDecimal.ZERO;
    Status status = Status.OPEN;
    String trackingNumber;
    //complex values, those are JPA beans, linked to this order instance
    List&lt;OrderLine&gt; orderLines = new ArrayList&lt;OrderLine&gt;();
    Customer customer;

	//mark this property as primary key, generated by underlying DB
    @Id @GeneratedValue
    @Column(name="ORDERID")
    public long getOrderId() {
        return orderId;
    }                    
    public void setOrderId(long id) {
        this.orderId = id;
    }     
	
	//tie this property to certain column in @Table
    @Column(name="ORDERDATE",nullable=false)
    public Date getOrderDate() {
        return orderDate;
    }
    public void setOrderDate(Date date) {
        this.orderDate = date;
    }
    //tie this property to certain column in @Table
    @Column(name="DELIVERYDATE",nullable=true)
    public Timestamp getDeliveryDate() {
        return deliveryDate;
    }
    public void setDeliveryDate(Timestamp date) {
        this.deliveryDate = date;
    }    

    @Transient
    public boolean isEmpty() {
        return (orderLines == null) || (orderLines.size()==0);
    }
    
    //tie this property to JPA/DB managed mapping, order[1]-----[*]orderline
    @OneToMany(mappedBy="order", cascade=CascadeType.ALL)
    public List&lt;OrderLine&gt; getOrderLines() {
        return orderLines;
    }
    public void setOrderLines(List&lt;OrderLine&gt; lines) {
        this.orderLines = lines;
    }
	
    public void addProduct(Product product, int quantity) {
        for (OrderLine line: orderLines) {
            if (product.getProductId() == line.getProduct().getProductId()) {
                line.addQuantity(quantity);
                return;
            }
        }

        OrderLine line = new OrderLine();
        line.setProduct(product);
        line.setQuantity(quantity);
        line.setOrder(this);

        orderLines.add(line);
    }

    public void removeProduct(Product product) {
        for (OrderLine line: orderLines) {
            if (product.getProductId() == line.getProduct().getProductId()) { 
                orderLines.remove(line);
                return;
            }
        }
    }

    //mark this property as JPA managed bean, it is fetched from Customer.@Table by user id, stored in
    //this.@Table collumn "USERID"
    @ManyToOne
    @JoinColumn(name="USERID")
    public Customer getCustomer() {
        return customer;
    }
    public void setCustomer(Customer customer) {
        this.customer = customer;
    }
	//tie this property to certain column in @Table
    @Column(name="NETAMOUNT",nullable=false,precision=12,scale=2)
    public BigDecimal getNetAmount() {
        return netAmount;
    }
    public void setNetAmount(BigDecimal amount) {
        this.netAmount = amount;
    }
	//tie this property to certain column in @Table
    @Column(name="TAX",nullable=false,precision=12,scale=2)
    public BigDecimal getTax() {
        return tax;
    }
    public void setTax(BigDecimal amount) {
        this.tax = amount;
    }
	//tie this property to certain column in @Table
    @Column(name="TOTALAMOUNT",nullable=false,precision=12,scale=2)
    public BigDecimal getTotalAmount() {
        return totalAmount;
    }
    public void setTotalAmount(BigDecimal amount) {
        this.totalAmount = amount;
    }
	//tie this property to certain column in @Table
    @Column(name="TRACKING")
    public String getTrackingNumber() { 
       return trackingNumber;
    }
    public void setTrackingNumber(String trackingNumber) {
        this.trackingNumber = trackingNumber;
    }
	//tie this property to certain column in @Table
    @Column(name="STATUS")
    public Status getStatus() {
        return status;
    }
    public void setStatus(Status status) {
        this.status = status;
    }

    @Transient
    public int getStatusCode() {
        return status.ordinal();
    }

    public void calculateTotals() {
        BigDecimal total = BigDecimal.ZERO;
        
        int index = 1;
        for (OrderLine line: orderLines) {
            line.setPosition(index++);
            total = total.add(line.getProduct().getPrice()
            	.multiply(new BigDecimal(line.getQuantity())));
        }
        
        setNetAmount(total);
        
        setTax(round(getNetAmount().multiply(TAX_RATE)));
        setTotalAmount(getNetAmount().add(getTax()));
    }

    public void cancel() {
        setStatus(Status.CANCELLED);
    }

    public void process() {
        setStatus(Status.PROCESSING);
    }

    public void ship(String tracking) {
        setStatus(Status.SHIPPED);
        setTrackingNumber(tracking);
    }
    

    /**
     * round a positive big decimal to 2 decimal points
     */
    private BigDecimal round(BigDecimal amount) {
        return new BigDecimal(amount.movePointRight(2)
        	.add(new BigDecimal(".5")).toBigInteger()).movePointLeft(2);
    }

    @Transient
    public boolean isOpen() {
       return status == Status.OPEN;
    }

}

	</programlisting>
	<para>Mapping between bean and database is create with <acronym>JPA</acronym> configuration file: <filename>persistence.xml</filename>. Examples configuration looks as follows: </para>
	<programlisting language="XML" role="XML"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<persistence xmlns="http://java.sun.com/xml/ns/persistence"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://java.sun.com/xml/ns/persistence 
 http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
 version="1.0">


	<persistence-unit name="custom-pu">
		<jta-data-source>java:/ShoppingDemoDatasource</jta-data-source>
		<class>org.mobicents.examples.convergeddemo.seam.pojo.Order</class>
		<properties>
			<property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect" />
			<!--  property name="hibernate.hbm2ddl.auto" value="create-drop" /-->
			<property name="hibernate.show_sql" value="true"/>
			<property name="hibernate.transaction.manager_lookup_class" 
				value="org.hibernate.transaction.JBossTransactionManagerLookup"/>
			<property name="jboss.entity.manager.factory.jndi.name" 
				value="java:/ShoppingDemoSleeEntityManagerFactory"/>
		</properties>
	</persistence-unit>
</persistence>
	]]>
	</programlisting>
	<para>It declares following values, significant to &THIS.EXAMPLE; Example:</para>
	<variablelist>
		<varlistentry>
			<term>jta-data-source</term>
			<listitem>
				<para><acronym>JNDI</acronym> name of data source used to connect to database</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>set of <literal>class</literal> elements</term>
			<listitem>
				<para>Define managed beans classes fully qualified name</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>hibernate.dialect</term>
			<listitem>
				<para>database specific dialect</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>jboss.entity.manager.factory.jndi.name</term>
			<listitem>
				<para><acronym>JNDI</acronym> name assigned to create persistence manager</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<note><para> Please refer to <acronym>JPA</acronym> documentation for deeper explanation persitence unit file format.</para> </note>
	<para>
		Data source is defined with single <acronym>XML</acronym> descriptor. It specifies properties of data base connection. In &THIS.EXAMPLE; Example data source descriptor( <filename>ShoppingDemo-dev-ds.xml</filename>) looks as follows:
	</para>
	<programlisting language="XML" role="XML"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE datasources
    PUBLIC "-//JBoss//DTD JBOSS JCA Config 1.5//EN"
    "http://www.jboss.org/j2ee/dtd/jboss-ds_1_5.dtd">
    
<datasources>
   
   <local-tx-datasource>
      <jndi-name>ShoppingDemoDatasource</jndi-name>
      <connection-url>jdbc:hsqldb:${jboss.server.data.dir}${/}hypersonic${/}dvd</connection-url>     
      <driver-class>org.hsqldb.jdbcDriver</driver-class>
      <user-name>sa</user-name>
      <password></password>
   </local-tx-datasource>
   
   <mbean code="org.jboss.jdbc.HypersonicDatabase" 
   		name="jboss:service=Hypersonic,database=dvd">
      <attribute name="Database">dvd</attribute>
      <attribute name="InProcessMode">true</attribute>
   </mbean>  
    
</datasources>
	]]>
	</programlisting>
	<para> Within <literal>local-tx-datasource</literal> descriptor defines data base connection properties (<acronym>URL</acronym>, driver, credentials). 
	Additionaly it defines custom bean <literal>jboss:service=Hypersonic,database=dvd</literal> This MBean exposes operations method to start the database manager which is a Swing UI via which user can manipulate the data by SQL queries. This is the feature of Hypersonic Database</para>
</section>	
