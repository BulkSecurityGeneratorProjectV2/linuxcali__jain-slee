<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="source_slee_events">
		<title>Events</title>
		<para>&THIS.EXAMPLE; defines custom events to communicate with <acronym>JSLEE</acronym> services. Events are defined by <acronym>XML</acronym> descriptor and event class.
		Event descriptor ties logical event id (name, vendor, version triplet) with event class. Exaple event descriptor file(<filename>event-jar.xml</filename>) looks as follows:  </para>
		<programlisting language="XML" role="XML"><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE event-jar PUBLIC "-//Sun Microsystems, Inc.//DTD JAIN SLEE Event 1.0//EN"
                           "http://java.sun.com/dtd/slee-event-jar_1_0.dtd">
<event-jar>
    <event-definition>
        <description>Fired from CheckoutAction. Initiates UserSBB and AdminSBB</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_PLACED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>

    <event-definition>
        <description>Before Order Processed Event: Fired once user 
        	places order(accepts it after ORDER_PLACED)</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.
        	BEFORE_ORDER_PROCESSED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>     
    
    <event-definition>
        <description>Fired from AfterOrderProcessedAction. Initiates OrderDeliverDateSbb</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_PROCESSED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>    
    
    <event-definition>
        <description>Order Information Event: fired when user cancels order</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_CANCELLED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>
    
    <event-definition>
        <description>Order Information Event: Fired when admin approves order</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_APPROVED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>              
    
    <event-definition>
        <description>Order Information Event: Fired when admin rejects order</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_REJECTED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>    
    
    <event-definition>
        <description>Order Information Event: fired once admin marks order for shipping</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_SHIPPED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>       
</event-jar>

		]]>
		</programlisting>
		<para>Event name, vendor and version form event identifier which is unique within <acronym>JSLEE</acronym> container. 
		It is used in fire methods to inform container which type of event it receives. </para>
		<para>
		Event class is simple java class, which is defined as follows: </para>
		<programlisting language="Java" role="JAVA">
public class CustomEvent implements Cloneable, Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private long id;

	private long orderId;

	private BigDecimal ammount;

	private String customerName;

	private String customerPhone;
	
	private String  userName;

	public CustomEvent(long orderId, BigDecimal ammount, String customerName,
			String customerPhone, String  userName) {
		id = new Random().nextLong() ^ System.currentTimeMillis();
		this.orderId = orderId;
		this.ammount = ammount;
		this.customerName = customerName;
		this.customerPhone = customerPhone;
		this.userName = userName;
	}

	public boolean equals(Object o) {
		if (o == this)
			return true;
		if (o == null)
			return false;
		return (o instanceof CustomEvent) &amp;&amp; ((CustomEvent) o).id == id;
	}

	public int hashCode() {
		return (int) id;
	}

	public BigDecimal getAmmount() {
		return ammount;
	}

	public String getCustomerName() {
		return customerName;
	}

	public long getOrderId() {
		return orderId;
	}

	public String getCustomerPhone() {
		return customerPhone;
	}
	
	/**
	 * 
	 * @return
	 */
	public String getUserName() {
		return userName;
	}	

	public Object clone() {
		CustomEvent clonedCustomEvent = new CustomEvent(this.getOrderId(), this
				.getAmmount(), this.getCustomerName(), this.getCustomerPhone(), this.getUserName());
		return clonedCustomEvent;
	}



}
	</programlisting>
	<para>Event class carries information relevant to service in its fields. Depending on event type(declared in descriptor) event is delivered to different <acronym>SBB</acronym> and different actions are performed based on event instance state.</para>
</section>