<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="source_slee">
	<title>SLEE</title>
	
	<section id="source_slee_events">
		<title>Events</title>
		<para>&THIS.EXAMPLE; defines couple custom events to communicate with <acronym>JSLEE</acronym> services. Events are defined by <acronym>XML</acronym> descriptor and event class.
		Event descriptor ties logical event id (name, vendor, version triplet) with event class. Exaple event descriptor file(<filename>event-jar.xml</filename>) looks as follows:  </para>
		<programlisting language="XML" role="XML"><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE event-jar PUBLIC "-//Sun Microsystems, Inc.//DTD JAIN SLEE Event 1.0//EN"
                           "http://java.sun.com/dtd/slee-event-jar_1_0.dtd">
<event-jar>
    <event-definition>
        <description>Fired from CheckoutAction. Initiates UserSBB and AdminSBB</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_PLACED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>

    <event-definition>
        <description>Before Order Processed Event: Fired once user places order(accepts it after ORDER_PLACED)</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.BEFORE_ORDER_PROCESSED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>     
    
    <event-definition>
        <description>Fired from AfterOrderProcessedAction. Initiates OrderDeliverDateSbb</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_PROCESSED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>    
    
    <event-definition>
        <description>Order Information Event: fired when user cancels order</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_CANCELLED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>
    
    <event-definition>
        <description>Order Information Event: Fired when admin approves order</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_APPROVED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>              
    
    <event-definition>
        <description>Order Information Event: Fired when admin rejects order</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_REJECTED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>    
    
    <event-definition>
        <description>Order Information Event: fired once admin marks order for shipping</description>
        <event-type-name>org.mobicents.slee.service.dvddemo.ORDER_SHIPPED</event-type-name>
        <event-type-vendor>org.mobicents</event-type-vendor>
        <event-type-version>1.0</event-type-version>
        <event-class-name>org.mobicents.slee.service.events.CustomEvent</event-class-name>
    </event-definition>       
</event-jar>

		]]>
		</programlisting>
		<para>Event name, vendor and version form event identifier which is unique within <acronym>JSLEE</acronym> container. 
		It is used in fire methods to inform container which type of event it receives. </para>
		<para>
		Event class is simple java class, which is defined as follows: </para>
		<programlisting language="Java" role="JAVA">
public class CustomEvent implements Cloneable, Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private long id;

	private long orderId;

	private BigDecimal ammount;

	private String customerName;

	private String customerPhone;
	
	private String  userName;

	public CustomEvent(long orderId, BigDecimal ammount, String customerName,
			String customerPhone, String  userName) {
		id = new Random().nextLong() ^ System.currentTimeMillis();
		this.orderId = orderId;
		this.ammount = ammount;
		this.customerName = customerName;
		this.customerPhone = customerPhone;
		this.userName = userName;
	}

	public boolean equals(Object o) {
		if (o == this)
			return true;
		if (o == null)
			return false;
		return (o instanceof CustomEvent) &amp;&amp; ((CustomEvent) o).id == id;
	}

	public int hashCode() {
		return (int) id;
	}

	public BigDecimal getAmmount() {
		return ammount;
	}

	public String getCustomerName() {
		return customerName;
	}

	public long getOrderId() {
		return orderId;
	}

	public String getCustomerPhone() {
		return customerPhone;
	}
	
	/**
	 * 
	 * @return
	 */
	public String getUserName() {
		return userName;
	}	

	public Object clone() {
		CustomEvent clonedCustomEvent = new CustomEvent(this.getOrderId(), this
				.getAmmount(), this.getCustomerName(), this.getCustomerPhone(), this.getUserName());
		return clonedCustomEvent;
	}



}
		</programlisting>
		<para>Event class carries information relevant to service in its fields. Depending on event type(declared in descriptor) event is delivered to different <acronym>SBB</acronym> and different actions are performed based on event instance state.</para>
	</section>
	<section id="source_slee_services">
		<title>Services</title>
		<para>As mentioned in <xref linkend="design_slee"/> &THIS.EXAMPLE; declares four services to handle different event types and associated scenarios.
		Service is declared with service descriptor, it is plain and simple, it just defines the service ID, the ID of the root SBB and its default priority. The complete XML is(for all services):</para>
		<programlisting language="XML" role="XML"><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE service-xml PUBLIC "-//Sun Microsystems, Inc.//DTD JAIN SLEE Service 1.0//EN" "http://java.sun.com/dtd/slee-service_1_0.dtd">

<service-xml>
  <service>

    <service-name>Seam DVD Example Admin SBB Service</service-name>
    <service-vendor>org.mobicents</service-vendor>
    <service-version>1.0</service-version>
        
    <!-- JSLEE v1.1 Specification, Early Draft Review Page 36 
         "A root-sbb element.
          This element identifies the root SBB of the Service. A root-sbb element contains the following
          sub-elements.
           * A description element.
             This is an optional informational element.
           * An sbb-name element, an sbb-vendor element, and an sbb-version element.
             These elements uniquely identify the root SBB." -->
    <root-sbb>
      <sbb-name>AdminSbb</sbb-name>
      <sbb-vendor>org.mobicents</sbb-vendor>
      <sbb-version>1.0</sbb-version>
    </root-sbb>

    <!-- JSLEE v1.1 Specification, Early Draft Review Page 36 
         "A default-priority element.
          This element specifies the default event delivery priority for the child relation from the SLEE to
          root SBB." -->
    <default-priority>0</default-priority>

  </service>
  <service>

    <service-name>Seam DVD Example User SBB Service</service-name>
    <service-vendor>org.mobicents</service-vendor>
    <service-version>1.0</service-version>
        
    <!-- JSLEE v1.1 Specification, Early Draft Review Page 36 
         "A root-sbb element.
          This element identifies the root SBB of the Service. A root-sbb element contains the following
          sub-elements.
           * A description element.
             This is an optional informational element.
           * An sbb-name element, an sbb-vendor element, and an sbb-version element.
             These elements uniquely identify the root SBB." -->
    <root-sbb>
      <sbb-name>UserSbb</sbb-name>
      <sbb-vendor>org.mobicents</sbb-vendor>
      <sbb-version>1.0</sbb-version>
    </root-sbb>

    <!-- JSLEE v1.1 Specification, Early Draft Review Page 36 
         "A default-priority element.
          This element specifies the default event delivery priority for the child relation from the SLEE to
          root SBB." -->
    <default-priority>50</default-priority>

  </service>
  <service>

    <service-name>Mobicents Furniture Store Example Order Date SBB Service</service-name>
    <service-vendor>org.mobicents</service-vendor>
    <service-version>1.0</service-version>
        
    <!-- JSLEE v1.1 Specification, Early Draft Review Page 36 
         "A root-sbb element.
          This element identifies the root SBB of the Service. A root-sbb element contains the following
          sub-elements.
           * A description element.
             This is an optional informational element.
           * An sbb-name element, an sbb-vendor element, and an sbb-version element.
             These elements uniquely identify the root SBB." -->
    <root-sbb>
      <sbb-name>OrderDeliverDateSbb</sbb-name>
      <sbb-vendor>org.mobicents</sbb-vendor>
      <sbb-version>1.0</sbb-version>
    </root-sbb>

    <!-- JSLEE v1.1 Specification, Early Draft Review Page 36 
         "A default-priority element.
          This element specifies the default event delivery priority for the child relation from the SLEE to
          root SBB." -->
    <default-priority>50</default-priority>

  </service>
  <service>

    <service-name>Mobicents Furniture Store Example Order Ship SBB Service</service-name>
    <service-vendor>org.mobicents</service-vendor>
    <service-version>1.0</service-version>
        
    <!-- JSLEE v1.1 Specification, Early Draft Review Page 36 
         "A root-sbb element.
          This element identifies the root SBB of the Service. A root-sbb element contains the following
          sub-elements.
           * A description element.
             This is an optional informational element.
           * An sbb-name element, an sbb-vendor element, and an sbb-version element.
             These elements uniquely identify the root SBB." -->
    <root-sbb>
      <sbb-name>OrderShipDateSbb</sbb-name>
      <sbb-vendor>org.mobicents</sbb-vendor>
      <sbb-version>1.0</sbb-version>
    </root-sbb>

    <!-- JSLEE v1.1 Specification, Early Draft Review Page 36 
         "A default-priority element.
          This element specifies the default event delivery priority for the child relation from the SLEE to
          root SBB." -->
    <default-priority>50</default-priority>

  </service>
</service-xml>
		]]>
		</programlisting>
	</section>
	<section id="source_slee_call">
		<title>CallControl</title>
		<para><literal>CallControlSbb</literal> is complex <acronym>SBB</acronym> as signaling part of &THIS.EXAMPLE; example involves two protocols. Signaling includes: </para>
		<itemizedlist>
			<listitem>
				<para>establishing network connection between desired <acronym>UA</acronym> with <acronym>SIP</acronym>  </para>
			</listitem>
			<listitem>
				<para>setting up media path  in &THIS.PLATFORM; Media Server with <acronym>MGCP</acronym> </para>
			</listitem>
		</itemizedlist>
		<para><acronym>SBB</acronym> class <literal>org.mobicents.slee.service.callcontrol.CallControlSbb</literal> contains all logic and required resources to perform call control. </para>
		<section id="source_slee_call_descriptor">
			<title>Descriptor</title>
		<para><literal>CallControlSbb</literal> is declared with <acronym>SBB</acronym> descriptor. Full declaration is embed in <acronym>XML</acronym> tag(<literal>&lt;sbb&gt;</literal>) in <filename>sbb-jar.xml</filename> file, it has following content: </para>
		<variablelist>
			<varlistentry>
				<term><acronym>SBB</acronym> class and ID definition</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<sbb-name>CallControlSbb</sbb-name>
<sbb-vendor>org.mobicents</sbb-vendor>
<sbb-version>1.0</sbb-version>


<sbb-classes>
	<sbb-abstract-class>
		<sbb-abstract-class-name>org.mobicents.slee.service.callcontrol.CallControlSbb</sbb-abstract-class-name>
		<cmp-field>
			<cmp-field-name>responseEventCmp</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>parentCmp</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>customEventCmp</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>sendByeCmp</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>callIdentifierCmp</cmp-field-name>
		</cmp-field>
	</sbb-abstract-class>
	<sbb-local-interface>
		<sbb-local-interface-name>org.mobicents.slee.service.callcontrol.CallControlSbbLocalObject</sbb-local-interface-name>
	</sbb-local-interface>
</sbb-classes>
					
					]]>
				</programlisting>
				<para><acronym>CallControlSbb</acronym> descriptor declares local interface used to make synchronous calls to <acronym>SBB</acronym> entity. It also declares following <acronym>CMP</acronym> fields: </para>
				<itemizedlist>
					<listitem>
						<para>responseEventCmp - to hold reference to <acronym>SIP</acronym> response event received during call to <acronym>UA</acronym>. </para>
					</listitem>
					<listitem>
						<para>parentCmp -  to hold reference to parent <acronym>SBB</acronym> <literal>local object</literal> </para>
					</listitem>
					<listitem>
						<para>customEventCmp - to hold reference to example custom object received.</para>
					</listitem>
					<listitem>
						<para>sendByeCmp - to hold flag indicating if call control should send <acronym>SIP</acronym> <literal>BYE</literal> to terminate call.</para>
					</listitem>
					<listitem>
						<para>callIdentifierCmp - to hold <acronym>MGCP</acronym> call identifier of ongoing call between service and <acronym>UA</acronym>.</para>
					</listitem>
				</itemizedlist>

				</listitem>
			</varlistentry>
			<varlistentry>
				<term><acronym>SIP</acronym> event handlers</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<event event-direction="Receive" initial-event="False">
	<event-name>ByeEvent</event-name>
	<event-type-ref>
		<event-type-name>javax.sip.Dialog.BYE</event-type-name>
		<event-type-vendor>net.java.slee</event-type-vendor>
		<event-type-version>1.2</event-type-version>
	</event-type-ref>
</event>
<event event-direction="Receive" initial-event="False">
	<event-name>ClientErrorRespEvent</event-name>
	<event-type-ref>
		<event-type-name>javax.sip.message.Response.CLIENT_ERROR</event-type-name>
		<event-type-vendor>net.java.slee</event-type-vendor>
		<event-type-version>1.2</event-type-version>
	</event-type-ref>
</event>
<event event-direction="Receive" initial-event="False">
	<event-name>SuccessRespEvent</event-name>
	<event-type-ref>
		<event-type-name>javax.sip.message.Response.SUCCESS</event-type-name>
		<event-type-vendor>net.java.slee</event-type-vendor>
		<event-type-version>1.2</event-type-version>
	</event-type-ref>
</event>
						]]>
					</programlisting>
					<para>Declared event handlers are:</para>
					<itemizedlist>
						<listitem>
							<para>ByeEvent - invoked to indicate call termination on remote <acronym>UA</acronym> </para>
						</listitem>
						<listitem>
							<para>ClientErrorRespEvent - invoked to indicate failure of call estabilish procedure.</para>
						</listitem>
						<listitem>
							<para>SuccessRespEvent - invoked to indicate succesful call.</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><acronym>MGCP</acronym> event handlers</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<event event-direction="Receive" initial-event="False">
	<event-name>CreateConnectionResponse</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.CREATE_CONNECTION_RESPONSE
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
					]]>
					</programlisting>
					<para>This event handler is invoked to indicate succesful execution of <acronym>CRCX</acronym> command.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>configuration enviroment entries</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<env-entry>
	<env-entry-name>callControlSipAddress</env-entry-name>
	<env-entry-type>java.lang.String</env-entry-type>
	<env-entry-value>${caller.sip}</env-entry-value>
</env-entry>
<env-entry>
	<env-entry-name>password</env-entry-name>
	<env-entry-type>java.lang.String</env-entry-type>
	<env-entry-value>${caller.password}</env-entry-value>
</env-entry>
<env-entry>
	<env-entry-name>server.address</env-entry-name>
	<env-entry-type>java.lang.String</env-entry-type>
	<env-entry-value>${server.address}</env-entry-value>
</env-entry>
					]]>
					</programlisting>
					<para>Entries configure following: </para>
					<itemizedlist>
						<listitem>
							<para>callControlSipAddress - AMIT</para>
						</listitem>
						<listitem>
							<para>password - AMIT</para>
						</listitem>
						<listitem>
							<para>server.address - &THIS.PLATFORM; Media Server <acronym>MGCP</acronym> <acronym>IP</acronym> address</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><acronym>RA</acronym> bindings</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<resource-adaptor-type-binding>
	<resource-adaptor-type-ref>
		<resource-adaptor-type-name>
			JAIN SIP
		</resource-adaptor-type-name>
		<resource-adaptor-type-vendor>
			javax.sip
		</resource-adaptor-type-vendor>
		<resource-adaptor-type-version>
			1.2
		</resource-adaptor-type-version>
	</resource-adaptor-type-ref>
	<activity-context-interface-factory-name>
		slee/resources/jainsip/1.2/acifactory
	</activity-context-interface-factory-name>
	<resource-adaptor-entity-binding>
		<resource-adaptor-object-name>
			slee/resources/jainsip/1.2/provider
		</resource-adaptor-object-name>
			<resource-adaptor-entity-link>
			SipRA
		</resource-adaptor-entity-link>
	</resource-adaptor-entity-binding>
</resource-adaptor-type-binding>

<resource-adaptor-type-binding>
	<resource-adaptor-type-ref>
		<resource-adaptor-type-name>
			jain-mgcp
		</resource-adaptor-type-name>
		<resource-adaptor-type-vendor>
			net.java
		</resource-adaptor-type-vendor>
		<resource-adaptor-type-version>
			2.0
		</resource-adaptor-type-version>
	</resource-adaptor-type-ref>
	<activity-context-interface-factory-name>
		slee/resources/jainmgcp/2.0/acifactory/demo
	</activity-context-interface-factory-name>
	<resource-adaptor-entity-binding>
		<resource-adaptor-object-name>
			slee/resources/jainmgcp/2.0/provider/demo
		</resource-adaptor-object-name>
		<resource-adaptor-entity-link>
			MGCPRA
		</resource-adaptor-entity-link>
	</resource-adaptor-entity-binding>
</resource-adaptor-type-binding>
					]]>
					</programlisting>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist>
		
		</section>
		
		<section id="source_slee_call_local_interface">
			<title>Local interface</title>
			<para><literal>CallControlSbb</literal> declares <literal>SbbLocalObject</literal> interface. It used to make synchronous calls to call control. Interface looks as follows: </para>
			<programlisting language="Java" role="JAVA">
public interface CallControlSbbLocalObject extends SbbLocalObject {
	
	public void setParent(SbbLocalObject sbbLocalObject);
	
	public void sendBye();
	
	public void setCustomEvent(CustomEvent event);

	public boolean getSendBye();

	public void sendRQNT(String textToPlay, String audioFileUrl,boolean detectDtmf);

}
			</programlisting>
			<para>Declared methods contracts are as follows:</para>
			<itemizedlist>
				<listitem>
					<para><literal>public void setParent(SbbLocalObject sbbLocalObject);</literal> - delegates call to <acronym>CMP</acronym> field, it is called by parent to add reference for call control. </para>
				</listitem>
				<!-- 
				<listitem>
					<para><literal>public ResponseEvent getResponseEvent();</literal> - delegates call to  </para>
				</listitem>
				 -->
				<listitem>
					<para><literal>public void sendBye();</literal> - requests call control to terminate call.</para>
				</listitem>
				<listitem>
					<para><literal>public boolean getSendBye();</literal> - delegates call to <acronym>CMP</acronym> field.</para>
				</listitem>
				<listitem>
					<para><literal>public void sendRQNT(String textToPlay, String audioFileUrl,boolean detectDtmf);</literal> - requests media server either to play audio file or convert passed text to audio and play to <acronym>UA</acronym>. </para>
				</listitem>
			</itemizedlist>
		</section>
		<section id="source_slee_call_sip_stat">
			<title>SIP Call state</title>
			<para><acronym>SIP</acronym> call to <acronym>UA</acronym> is managed by series of classes representing call state. Each class represents phase of call. Each state class implements methods inherited from following interface: </para>
			<programlisting language="Java" role="JAVA">
public interface SimpleCallFlowState {
	public void execute(ResponseEvent event);
	public void execute(RequestEvent event);
}
			</programlisting>
			<para>Each state class implementation performs adeqate actions to tear down call. Call state is persisted by means of <literal>org.mobicents.slee.util.SessionAssociation</literal> and <literal>org.mobicents.slee.util.CacheUtility</literal>
			classes. <literal>SessionAssociation</literal> is stored in cache( by <literal>CacheUtility</literal> instance). It builds association between two sessions(<literal>Dialog</literal>/<literal>org.mobicents.slee.util.Session</literal>) and call state class.
			 Please refer to source classes for full list of states.</para>
			
			
			<note><para>Note that <literal>SIP</literal> call state classes are fit to perform two way call between agents, however example does not support this scenario, yet. For better understanding of call flow please refer to call state classes source and <literal>SIP</literal> call procedure.</para></note>
		</section>
		
		<section id="source_slee_call_sip_events">
			<title>SIP Event handlers</title>
			<para><acronym>SBB</acronym> class <literal>org.mobicents.slee.service.callcontrol.CallControlSbb</literal> implements <acronym>SIP</acronym> event handlers. Each handler deffers execution to mentioned call state classes. Handlers are declared as follows:</para>
     		<programlisting language="Java" role="JAVA">
       public void onByeEvent(RequestEvent event, ActivityContextInterface aci) {

		log.info("************Received BYEEEE**************");

		if (log.isFineEnabled()) {
			log.fine("Received BYE");
		}

		try {
			getSipUtils().sendStatefulOk(event);
			setSendBye(false);
			releaseMediaConnectionAndDialog();
		} catch (ParseException e) {
			e.printStackTrace();
		} catch (SipException e) {
			e.printStackTrace();
		} catch (InvalidArgumentException invalidArgEx) {
			invalidArgEx.printStackTrace();
		}
	}

	public void onClientErrorRespEvent(ResponseEvent event,
			ActivityContextInterface aci) {
		if (log.isInfoEnabled()) {
			log.info("Received client error event : "
					+ event.getResponse().getStatusCode());
		}
		executeResponseState(event);
	}

	public void onSuccessRespEvent(ResponseEvent event,
			ActivityContextInterface aci) {
		if (log.isInfoEnabled()) {
			log.info("Received success response event "
					+ event.getResponse().getStatusCode());
		}
		executeResponseState(event);
		if (((CSeq) event.getResponse().getHeader(CSeq.NAME)).getMethod()
				.compareTo(Request.BYE) == 0)
				//detach from all activities and delete connections
			releaseMediaConnectionAndDialog();
		if (((CSeq) event.getResponse().getHeader(CSeq.NAME)).getMethod()
				.compareTo(Request.INVITE) == 0)
				//call is estabilished, we can send BYE, lets mark that.
			this.setSendByeCmp(true);

	}
	
	private void executeRequestState(RequestEvent event) {
		String callId = ((CallIdHeader) event.getRequest().getHeader(
				CallIdHeader.NAME)).getCallId();
		SessionAssociation sa = (SessionAssociation) getCacheUtility().get(
				callId);
		SimpleCallFlowState simpleCallFlowState = getState(sa.getState());
		simpleCallFlowState.execute(event);
	}

	private void executeResponseState(ResponseEvent event) {
		String callId = ((CallIdHeader) event.getResponse().getHeader(
				CallIdHeader.NAME)).getCallId();
		SessionAssociation sa = (SessionAssociation) getCacheUtility().get(
				callId);
		SimpleCallFlowState simpleCallFlowState = getState(sa.getState());
		simpleCallFlowState.execute(event);
	}
		</programlisting>
		<para>Additionaly success event handler performs actions to clean enviroment - release media server(tear down media path) and <acronym>JSLEE</acronym> resources: </para>
		<programlisting language="Java" role="JAVA">
	private void releaseMediaConnectionAndDialog() {
		ActivityContextInterface[] activities = getSbbContext().getActivities();
		SbbLocalObject sbbLocalObject = getSbbContext().getSbbLocalObject();

		for (ActivityContextInterface attachedAci : activities) {
			if (attachedAci.getActivity() instanceof Dialog) {
				attachedAci.detach(sbbLocalObject);
				attachedAci.detach(this.getParentCmp());
			}
			if (attachedAci.getActivity() instanceof MgcpConnectionActivity) {
				attachedAci.detach(sbbLocalObject);
				attachedAci.detach(this.getParentCmp());

			}
			if (attachedAci.getActivity() instanceof MgcpEndpointActivity) {
				attachedAci.detach(sbbLocalObject);
				attachedAci.detach(this.getParentCmp());
				MgcpEndpointActivity mgcpEndpoint = (MgcpEndpointActivity) attachedAci
						.getActivity();
				DeleteConnection deleteConnection = new DeleteConnection(this,
						mgcpEndpoint.getEndpointIdentifier());
				deleteConnection.setCallIdentifier(this.getCallIdentifier());

				deleteConnection.setTransactionHandle(getMgcpProvider()
						.getUniqueTransactionHandler());
				getMgcpProvider().sendMgcpEvents(
						new JainMgcpEvent[] { deleteConnection });

			}

		}
		this.setCallIdentifier(null);
	}
			</programlisting>
		</section>
		<section id="source_slee_call_mgcp_events">
			<title>MGCP Event handlers</title>
			<para><literal>CallControlSbb</literal> declares single <acronym>MGCP</acronym> event handler. It is implemented as follows: </para>
			<programlisting language="Java" role="JAVA">
	public void onCreateConnectionResponse(CreateConnectionResponse event,
			ActivityContextInterface aci) {
		log.info("Receive CRCX response: " + event);

		ReturnCode status = event.getReturnCode();

		switch (status.getValue()) {
		case ReturnCode.TRANSACTION_EXECUTED_NORMALLY:<co id="example.discard.co1"/>
			log.info("Connection created properly.");
			break;
		default:<co id="example.discard.co2"/>
			ReturnCode rc = event.getReturnCode();
			log.severe("CRCX failed. Value = " + rc.getValue() + " Comment = "
					+ rc.getComment());

			if (this.getSendByeCmp()) {
				this.sendBye();
			}

			return;
		}
		boolean attachParent = false;
		
		if (event.getSecondEndpointIdentifier() == null) {
		<co id="example.discard.co3"/>
			// this is response for PR creation
			// we have one connection activity, lets send another crcx
			
			//send ACK with sdp
			DialogActivity da=getDialogActivity();
			try {
				Request ackRequest=da.createAck(da.getLocalSeqNumber());
				ContentTypeHeader cth = ((SleeSipProvider)getSipProvider()).getHeaderFactory().createContentTypeHeader("application", "sdp");
				ackRequest.setContent(event.getLocalConnectionDescriptor().toString(), cth);
				da.sendAck(ackRequest);
			} catch (InvalidArgumentException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (SipException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			EndpointIdentifier endpointID = new EndpointIdentifier(
					IVR_ENDPOINT, mmsBindAddress + ":" + MGCP_PEER_PORT);
			CreateConnection createConnection = new CreateConnection(this,
					getCallIdentifier(), endpointID, ConnectionMode.SendRecv);

			int txID = ((JainMgcpProvider) getMgcpProvider())
					.getUniqueTransactionHandler();
			createConnection.setTransactionHandle(txID);

			// now set other end
			try {
				createConnection.setSecondEndpointIdentifier(event
						.getSpecificEndpointIdentifier());
			} catch (ConflictingParameterException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			MgcpConnectionActivity connectionActivity = null;
			try {
				connectionActivity = ((JainMgcpProvider) getMgcpProvider())
						.getConnectionActivity(txID, endpointID);
				ActivityContextInterface epnAci = ((MgcpActivityContextInterfaceFactory) getMgcpActivityContestInterfaceFactory())
						.getActivityContextInterface(connectionActivity);
				epnAci.attach(getSbbContext().getSbbLocalObject());

			} catch (FactoryException ex) {
				ex.printStackTrace();
			} catch (NullPointerException ex) {
				ex.printStackTrace();
			} catch (UnrecognizedActivityException ex) {
				ex.printStackTrace();
			}

			((JainMgcpProvider) getMgcpProvider())
					.sendMgcpEvents(new JainMgcpEvent[] { createConnection });

		} else {
			// this is last
			attachParent = true;
		}
		
		<co id="example.discard.co4"/>
		EndpointIdentifier eid = event.getSpecificEndpointIdentifier();
		log.info("Creating endpoint activity on: " + eid);
		MgcpEndpointActivity eActivity = ((JainMgcpProvider) getMgcpProvider())
				.getEndpointActivity(eid);
		ActivityContextInterface eAci = ((MgcpActivityContextInterfaceFactory) getMgcpActivityContestInterfaceFactory())
				.getActivityContextInterface(eActivity);
		eAci.attach(this.getSbbContext().getSbbLocalObject());
		// eAci.attach(this.getParentCmp());

		if (attachParent) {
			<co id="example.discard.co5"/>
			// we must attach parent only if we know media path is there, it
			// will get this last event and trigger action to be performed 
			// after media path is created
			ActivityContextInterface[] acis = this.getSbbContext()
					.getActivities();
			for (ActivityContextInterface _aci : acis) {
				if (_aci.getActivity() instanceof MgcpEndpointActivity
						|| _aci.getActivity() instanceof MgcpConnectionActivity) {
					_aci.attach(getParentCmp());
				}
			}

		}

	}
			</programlisting>
			<para>Handler performs following actions:</para>
			<calloutlist>
				<callout arearefs="example.discard.co1">
			       	<para>Executes if operation was a success</para>
       			</callout>
       			<callout arearefs="example.discard.co2">
			       	<para>If media server failed to create connection it tears down media path and call.</para>
       			</callout>
       			<callout arearefs="example.discard.co3">
			       	<para>If there is no second endpoint identifier present(this means that it is first connection created for media path) it sends <acronym>SDP</acronym> data back to <acronym>UA</acronym>. Alo it sends second create connection request. Second <acronym>CRCX</acronym> creates connection between <acronym>IVR</acronym> and <acronym>PR</acronym> endpoints. Answer will be delivered to this event handler.</para>
       			</callout>
       			<callout arearefs="example.discard.co4">
			       	<para>create endpoint activity and attach <literal>CallControlSbb</literal>.</para>
       			</callout>
       			<callout arearefs="example.discard.co5">
			       	<para>if media path is established, attach parent to connection activities. Parent will receive <acronym>CRCX</acronym> response event and continue execution.</para>
       			</callout>
			</calloutlist>
			<para><acronym>CRCX</acronym> events create media path in &THIS.PLATFORM; Media server. Diagram below depicts logical structure of path: </para>
			<mediaobject>
				<imageobject>
					<imagedata width="300px" align="center" fileref="images/source-slee1.png"
						format="PNG" />
				</imageobject>
				<caption>
					<para>Media Path</para>
				</caption>
			</mediaobject>
		</section>
		<section id="source_slee_call_mgcp_rqnt">
			<title>Audio request</title>
			<para><literal>CallControlSbb</literal> implements method which signals &THIS.PLATFORM; Media server. It is called by acting service root. Method implementation looks as follows:</para>
			<programlisting language="Java" role="JAVA">
	public void sendRQNT(String textToPlay, String audioFileUrl,
			boolean detectDtmf) {
			<co id="example.rqnt.co1"/>
		MgcpEndpointActivity endpointActivity = getEndpointActivity("IVR");
		
		if (endpointActivity == null) {
			// bad practice
			throw new RuntimeException("There is no IVR endpoint activity");
		}
		
		EndpointIdentifier endpointID = endpointActivity
				.getEndpointIdentifier();
		MgcpConnectionActivity connectionActivity = 
			getConnectionActivity(endpointActivity.getEndpointIdentifier());
		if (connectionActivity == null) {
			// bad practice
			throw new RuntimeException("There is no IVR connection endpoint activity");
		}
		<co id="example.rqnt.co2"/>
		ConnectionIdentifier connectionID = new ConnectionIdentifier(
				connectionActivity.getConnectionIdentifier());
				
		NotificationRequest notificationRequest = new NotificationRequest(this,
				endpointID, ((JainMgcpProvider) getMgcpProvider())
						.getUniqueRequestIdentifier());
		RequestedAction[] actions = new RequestedAction[] { RequestedAction.NotifyImmediately };
		<co id="example.rqnt.co3"/>
		PackageName auPackageName=PackageName.factory("AU");
		if (textToPlay != null) {

			// this will give something like: "AU/pa(ts("+textToPlay+"))", 
			//AU and pa are configured in mgcp controller.
			<co id="example.rqnt.co4"/>
			MgcpEvent e = MgcpEvent.factory("ann");
			EventName[] signalRequests = { 
				new EventName(auPackageName, e.withParm("ts(" + textToPlay
					+ ")"),connectionID) };
			notificationRequest.setSignalRequests(signalRequests);
			
			<co id="example.rqnt.co5"/>
			RequestedEvent[] requestedEvents = {
					new RequestedEvent(new EventName(auPackageName, 
						MgcpEvent.oc,connectionID), actions),
					new RequestedEvent(new EventName(auPackageName, 
						MgcpEvent.of,connectionID), actions),
					 };
			notificationRequest.setRequestedEvents(requestedEvents);
		} else if (audioFileUrl != null) {
			<co id="example.rqnt.co6"/>
			MgcpEvent e = MgcpEvent.factory("ann");
			EventName[] signalRequests = { new EventName(auPackageName, 
				e.withParm(audioFileUrl),connectionID) };
			
			<co id="example.rqnt.co7"/>
			notificationRequest.setSignalRequests(signalRequests);
			RequestedEvent[] requestedEvents = {
					new RequestedEvent(new EventName(auPackageName,
						 MgcpEvent.oc,connectionID), actions),
					new RequestedEvent(new EventName(auPackageName,
						 MgcpEvent.of,connectionID), actions),
					 };
			notificationRequest.setRequestedEvents(requestedEvents);
		}

		if (detectDtmf) {
			<co id="example.rqnt.co8"/>
			
			

			// This has to be present, since MGCP states that new RQNT erases
			// previous set.
			RequestedEvent[] requestedEvents = {
					new RequestedEvent(new EventName(auPackageName, 
						MgcpEvent.oc,connectionID), actions),
					new RequestedEvent(new EventName(auPackageName, 
						MgcpEvent.of,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmf0,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmf1,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmf2,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmf3,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmf4,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmf5,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmf6,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmf7,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmf8,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmf9,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmfA,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmfB,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmfC,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmfD,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmfStar,connectionID), actions),
					new RequestedEvent(new EventName(PackageName.Dtmf, 
						MgcpEvent.dtmfHash,connectionID), actions) };
			
			notificationRequest.setRequestedEvents(requestedEvents);
		}
		<co id="example.rqnt.co9"/>
		notificationRequest
				.setTransactionHandle(((JainMgcpProvider) getMgcpProvider())
						.getUniqueTransactionHandler());
		<co id="example.rqnt.co10"/>
		NotifiedEntity notifiedEntity = new NotifiedEntity(JBOSS_BIND_ADDRESS,
				JBOSS_BIND_ADDRESS, MGCP_PORT);
		notificationRequest.setNotifiedEntity(notifiedEntity);

		// we can send empty RQNT, that is clean all req.
		((JainMgcpProvider) getMgcpProvider())
				.sendMgcpEvents(new JainMgcpEvent[] { notificationRequest });

		log.info(" NotificationRequest sent: \n"+notificationRequest);
	}

			</programlisting>
			<para>Method performs following actions:</para>
			<calloutlist>
				<callout arearefs="example.rqnt.co1">
			       	<para>Get <acronym>IVR</acronym> endpoint activity and connection activity</para>
       			</callout>
       			<callout arearefs="example.rqnt.co2">
			       	<para>Create proper notification request</para>
       			</callout>
       			<callout arearefs="example.rqnt.co3">
			       	<para>Create <acronym>MGCP</acronym> package name for announcement</para>
       			</callout>
       			<callout arearefs="example.rqnt.co4">
			       	<para>Create event and signal for <acronym>TTS</acronym> </para>
       			</callout>
       			<callout arearefs="example.rqnt.co5">
			       	<para>Add requested event - this makes server notify once announcement ends</para>
       			</callout>
       			<callout arearefs="example.rqnt.co6">
			       	<para>Create event and add signal for regular audio file</para>
       			</callout>
       			<callout arearefs="example.rqnt.co7">
			       	<para>Add requested event - this makes server notify once announcement ends</para>
       			</callout>
       			<callout arearefs="example.rqnt.co8">
			       	<para>Add request for <acronym>DTMF</acronym> events detection - this allows to receive notification on <acronym>DTMF</acronym> </para>
       			</callout>
       			<callout arearefs="example.rqnt.co9">
			       	<para>Create new <acronym>MGCP</acronym> transaction</para>
       			</callout>
       			<callout arearefs="example.rqnt.co10">
			       	<para>Add this <acronym>MGCP</acronym> stack as destination for notification events</para>
       			</callout>
			</calloutlist>
		</section>
		

	</section>
	<section id="source_slee_user">
		<title>User</title>
		<para><literal>UserSbb</literal> is root <acronym>SBB</acronym> of service handlign logic to contact user once order is placed through web interfacee.	
		</para>
		<para><acronym>SBB</acronym> class <literal>org.mobicents.slee.service.user.UserSbb</literal> contains all logic and required resources to contact user and query him if order should be accepted or canceled. 
		This <acronym>SBB</acronym> is called as first.</para>
		<section id="source_slee_user_descriptor">
			<title>Descriptor</title>
		<para><literal>UserSbb</literal> is declared with <acronym>SBB</acronym> descriptor. Full declaration is embed in <acronym>XML</acronym> tag(<literal>&lt;sbb&gt;</literal>) in <filename>sbb-jar.xml</filename> file, it has following content: </para>
		<variablelist>
			<varlistentry>
				<term><acronym>SBB</acronym> class and ID definition</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<description>	
	calls user, asks if order for ammount xxxx should be accepted or canceled
</description>

<sbb-name>UserSbb</sbb-name>
<sbb-vendor>org.mobicents</sbb-vendor>
<sbb-version>1.0</sbb-version>
		
<!-- Delegate to this child SBB after the first INVITE has been sent -->
<sbb-ref>
	<sbb-name>CallControlSbb</sbb-name>
	<sbb-vendor>org.mobicents</sbb-vendor>
	<sbb-version>1.0</sbb-version>
	<sbb-alias>CallControl</sbb-alias>
</sbb-ref>

<sbb-classes>
	<sbb-abstract-class>
		<sbb-abstract-class-name>
			org.mobicents.slee.service.user.UserSbb
		</sbb-abstract-class-name>
		<cmp-field>
		<cmp-field-name>customEvent</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>sendBye</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>childSbbLocalObject</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>ttsString</cmp-field-name>
		</cmp-field>
		<get-child-relation-method>
			<sbb-alias-ref>CallControl</sbb-alias-ref>
			<get-child-relation-method-name>
				getCallControlSbbChild
			</get-child-relation-method-name>
			<default-priority>3</default-priority>
		</get-child-relation-method>
	</sbb-abstract-class>
</sbb-classes>
					
					]]>
				</programlisting>
				<para><acronym>UserSbb</acronym> descriptor declares  following <acronym>CMP</acronym> fields: </para>
				<itemizedlist>
					<listitem>
						<para>ttsString - text to be played to <acronym>UA</acronym>. </para>
					</listitem>
					<listitem>
						<para>childSbbLocalObject -  to hold reference to child <acronym>SBB</acronym> <literal>local object</literal>(call control) </para>
					</listitem>
					<listitem>
						<para>customEvent - to hold reference to example custom object received.</para>
					</listitem>
					<listitem>
						<para>sendBye - to hold flag indicating if call control should send <acronym>SIP</acronym> <literal>BYE</literal> to terminate call.</para>
					</listitem>
				</itemizedlist>
				<para><literal>UserSbb</literal> descriptor declares also child reference to call control <acronym>SBB</acronym> (by declaring child relation metho) </para>
				</listitem>
				
			</varlistentry>
			<varlistentry>
				<term><acronym>MGCP</acronym> event handlers</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<event event-direction="Receive" initial-event="False">
	<event-name>NotificationRequestResponse</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.NOTIFICATION_REQUEST_RESPONSE
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>  
<event event-direction="Receive" initial-event="False">
	<event-name>NotifyRequest</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.NOTIFY
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
<event event-direction="Receive" initial-event="False">
	<event-name>CreateConnectionResponse</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.CREATE_CONNECTION_RESPONSE
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
						]]>
					</programlisting>
					<para>Declared event handlers are:</para>
					<itemizedlist>
						<listitem>
							<para>NotificationRequestResponse - called to indicate status of call control reqest for audio playback </para>
						</listitem>
						<listitem>
							<para>NotifyRequest - called no indicate that requested event has been detected</para>
						</listitem>
						<listitem>
							<para>CreateConnectionResponse - called to indicate <acronym>CRCX</acronym> request result</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Custom events</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<event event-direction="Fire">
	<event-name>OrderCancelled</event-name>
	<event-type-ref>
		<event-type-name>
			org.mobicents.slee.service.dvddemo.ORDER_CANCELLED
		</event-type-name>
		<event-type-vendor>org.mobicents</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>

<event event-direction="Receive" initial-event="True">
	<event-name>OrderPlaced</event-name>
	<event-type-ref>
		<event-type-name>
			org.mobicents.slee.service.dvddemo.ORDER_PLACED
		</event-type-name>
		<event-type-vendor>org.mobicents</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
	<initial-event-select variable="ActivityContext" />
	<!-- initial-event-selector-method-name>callIdSelect</initial-event-selector-method-name -->
</event>
						]]>
					</programlisting>
					<para>Declared event handlers are:</para>
					<itemizedlist>
						<listitem>
							<para>OrderCancelled - is actualy event fire method, it fires event into <acronym>SLEE</acronym> on behalf of <acronym>SBB</acronym> </para>
						</listitem>
						<listitem>
							<para>OrderPlaced - invoked as initial event for this service, called once order is placed with web interface</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>configuration enviroment entries</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<env-entry>
	<description>
		SIP URI of Admin. User will see this address as Caller
		Address
	</description>
	<env-entry-name>callerSip</env-entry-name>
	<env-entry-type>java.lang.String</env-entry-type>
	<env-entry-value>${caller.sip}</env-entry-value>
</env-entry>
					]]>
					</programlisting>
					<para>Entries configure following: </para>
					<itemizedlist>
						<listitem>
							<para>callerSip - sip address of Admins <acronym>UA</acronym> </para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><acronym>RA</acronym> bindings</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<resource-adaptor-type-binding>
	<resource-adaptor-type-ref>
		<resource-adaptor-type-name>
			JAIN SIP
		</resource-adaptor-type-name>
		<resource-adaptor-type-vendor>
			javax.sip
		</resource-adaptor-type-vendor>
		<resource-adaptor-type-version>
			1.2
		</resource-adaptor-type-version>
	</resource-adaptor-type-ref>
	<activity-context-interface-factory-name>
		slee/resources/jainsip/1.2/acifactory
	</activity-context-interface-factory-name>
	<resource-adaptor-entity-binding>
		<resource-adaptor-object-name>
			slee/resources/jainsip/1.2/provider
		</resource-adaptor-object-name>
			<resource-adaptor-entity-link>
			SipRA
		</resource-adaptor-entity-link>
	</resource-adaptor-entity-binding>
</resource-adaptor-type-binding>

<resource-adaptor-type-binding>
	<resource-adaptor-type-ref>
		<resource-adaptor-type-name>
			jain-mgcp
		</resource-adaptor-type-name>
		<resource-adaptor-type-vendor>
			net.java
		</resource-adaptor-type-vendor>
		<resource-adaptor-type-version>
			2.0
		</resource-adaptor-type-version>
	</resource-adaptor-type-ref>
	<activity-context-interface-factory-name>
		slee/resources/jainmgcp/2.0/acifactory/demo
	</activity-context-interface-factory-name>
	<resource-adaptor-entity-binding>
		<resource-adaptor-object-name>
			slee/resources/jainmgcp/2.0/provider/demo
		</resource-adaptor-object-name>
		<resource-adaptor-entity-link>
			MGCPRA
		</resource-adaptor-entity-link>
	</resource-adaptor-entity-binding>
</resource-adaptor-type-binding>
					]]>
					</programlisting>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist>
		
		</section>
		<section id="source_slee_user_custom_event">
			<title>Custom event handlers</title>
			<para><literal>UserSbb</literal> declares two custom event handlers:</para>
			<itemizedlist>
				<listitem>
					<programlisting language="Java" role="JAVA">
	public abstract void fireOrderCancelled(CustomEvent event,
		 ActivityContextInterface aci, javax.slee.Address address);
					</programlisting>
					<para>It is simple event fire method used by <acronym>SBB</acronym> to fire method into <acronym>SLEE</acronym>. </para>
				</listitem>
				<listitem>
					<programlisting language="Java" role="JAVA">
	public void onOrderPlaced(CustomEvent event, ActivityContextInterface ac) {
		logger.info("UserSbb: " + this + ": received an ORDER_PLACED event. OrderId = " 
			+ event.getOrderId()
				+ ". ammount = " + event.getAmmount() + ". Customer Name = " 
					+ event.getCustomerName());

		<co id="example.user2.co1"/>
		// Detach from NullActivity
		ac.detach(this.getSbbContext().getSbbLocalObject());
		<co id="example.user2.co2"/>
		this.setCustomEvent(event);

		<co id="example.user2.co3"/>
		StringBuilder stringBuffer = new StringBuilder();
		stringBuffer.append("Welcome ");
		stringBuffer.append(event.getCustomerName());
		stringBuffer.append(". You have placed an order of $");
		stringBuffer.append(event.getAmmount());
		stringBuffer.append(". Press 1 to confirm and 2 to decline.");

		//ttsSession.textToAudioFile(stringBuffer.toString());
		this.setTtsString(stringBuffer.toString());

		try {
			<co id="example.user2.co4"/>
			// Set the caller address to the address of our call controller
			Address callerAddress = getSipUtils().convertURIToAddress(callerSip);
			callerAddress.setDisplayName(callerSip);

			// Retrieve the callee addresses from the event
			Address calleeAddress = getSipUtils().
				convertURIToAddress(event.getCustomerPhone());

			// Build the INVITE request
			Request request = getSipUtils().buildInvite(callerAddress, calleeAddress, null, 1);

			// Create a new transaction based on the generated request
			ClientTransaction ct = getSipProvider().getNewClientTransaction(request);

			Header h = ct.getRequest().getHeader(CallIdHeader.NAME);
			String calleeCallId = ((CallIdHeader) h).getCallId();
			<co id="example.user2.co5"/>
			SessionAssociation sa = new SessionAssociation(
					"org.mobicents.slee.service.callcontrol.CallControlSbb$InitialState");

			Session calleeSession = new Session(calleeCallId);
			calleeSession.setSipAddress(calleeAddress);
			calleeSession.setToBeCancelledClientTransaction(ct);

			// The dialog for the client transaction in which the INVITE is sent
			Dialog dialog = ct.getDialog();
			if (dialog != null &amp;*&amp; logger.isFineEnabled()) {
				logger.fine("Obtained dialog from ClientTransaction : automatic dialog support on");
			}
			if (dialog == null) {
				// Automatic dialog support turned off
				try {
					dialog = getSipProvider().getNewDialog(ct);
					if (logger.isFineEnabled()) {
						logger.fine("Obtained dialog for INVITE request to callee with getNewDialog");
					}
				} catch (Exception e) {
					logger.severe("Error getting dialog", e);
				}
			}

			// Get activity context from factory
			ActivityContextInterface sipACI = getSipActivityContextInterfaceFactory()
				.getActivityContextInterface((DialogActivity)dialog);

			ActivityContextInterface clientSipACI = getSipActivityContextInterfaceFactory()
					.getActivityContextInterface(ct);

			if (logger.isFineEnabled()) {
				logger.fine("Obtained dialog in onThirdPCCTriggerEvent : callId = " 
					+ dialog.getCallId().getCallId());
			}
			dialog.terminateOnBye(true);
			calleeSession.setDialog(dialog);
			sa.setCalleeSession(calleeSession);

			/**
			 * Actually callerSession is not required for this example and clean
			 * up is needed
			 */
			Session callerSession = new Session();

			// Create a new caller address from caller URI specified in the
			// event (the real caller address) since we need this in the next
			// INVITE. -- not used yet, create only to omit null checks 
			//which could cause bugs later!
			callerAddress = getSipUtils().convertURIToAddress(callerSip);
			callerSession.setSipAddress(callerAddress);
			// Since we don't have the client transaction for the caller yet,
			// just set the to be canceled client transaction to null.
			callerSession.setToBeCancelledClientTransaction(null);
			sa.setCallerSession(callerSession);

			// put the callId for the callee dialog in the cache
			getCacheUtility().put(calleeCallId, sa);
			<co id="example.user2.co6"/>
			ChildRelation relation = getCallControlSbbChild();
			// Create child SBB
			CallControlSbbLocalObject child = (CallControlSbbLocalObject) relation.create();

			setChildSbbLocalObject(child);

			child.setParent(getSbbContext().getSbbLocalObject());

			child.setCustomEvent(event);

			// Attach child SBB to the activity context
			sipACI.attach(child);
			clientSipACI.attach(child);
			sipACI.attach(this.getSbbContext().getSbbLocalObject());
			// Send the INVITE request
			<co id="example.user2.co7"/>
			dialog.sendRequest(ct);
			
		} catch (ParseException parExc) {
			logger.severe("Parse Exception while parsing the callerAddess", parExc);
		} catch (InvalidArgumentException invalidArgExcep) {
			logger.severe("InvalidArgumentException while building Invite Request", invalidArgExcep);
		} catch (TransactionUnavailableException tranUnavExce) {
			logger.severe("TransactionUnavailableException when trying to getNewClientTransaction"
				, tranUnavExce);
		} catch (UnrecognizedActivityException e) {

			logger.severe("UnrecognizedActivityException when trying to getActivityContextInterface", e);
		} catch (CreateException creaExce) {
			logger.severe("CreateException while trying to create Child", creaExce);
		} catch (SipException sipExec) {
			logger.severe("SipException while trying to send INVITE Request", sipExec);
		}

	}
					</programlisting>
					<para><literal>onOrderPlaced</literal> is invoked as first handler. It is initial event for <literal>user service</literal>. This handler performs following actions: </para>
					<calloutlist>
						<callout arearefs="example.user2.co1">
					       	<para>Detach from activity, allow container to reclaim it.</para>
		       			</callout>
		       			<callout arearefs="example.user2.co2">
					       	<para>Store custom event in <acronym>CMP</acronym> </para>
		       			</callout>
		       			<callout arearefs="example.user2.co3">
					       	<para>Build text to be played as audio once <literal>CallControlSbb</literal> establishes media path.</para>
		       			</callout>
		       			<callout arearefs="example.user2.co4">
					       	<para>Create <acronym>SIP</acronym> <literal>INVITE</literal> to start <literal>Dialog</literal>.</para>
		       			</callout>
		       			<callout arearefs="example.user2.co5">
					       	<para>Create <literal>SessionAssociation</literal> and fill it.</para>
		       			</callout>
		       			<callout arearefs="example.user2.co6">
					       	<para>Create child and populate <acronym>CMP</acronym>s. </para>
		       			</callout>
		       			<callout arearefs="example.user2.co7">
					       	<para>Send request to users <acronym>UA</acronym>. </para>
		       			</callout>
       			</calloutlist>
				</listitem>
			</itemizedlist>
			
		</section>
		<section id="source_slee_user_mgcp_event">
			<title><acronym>MGCP</acronym> event handlers</title>
			<para><literal>UserSbb</literal> declares three <acronym>MGCP</acronym> event handlers:</para>
			<itemizedlist>
				<listitem>
					<programlisting language="Java" role="JAVA">
	public void onCreateConnectionResponse(CreateConnectionResponse event, ActivityContextInterface aci)
	{
		//check just in case
		if(event.getSecondEndpointIdentifier()!=null)
		{
			//we have media path estabilished.
			getChildSbbLocalObject().sendRQNT(getTtsString(), null, true);
			this.setTtsString(null);
		}
	}
					</programlisting>
					<para><literal>onCreateConnectionResponse</literal> is invoked once child call control establishes media path. It requests call control to play text as audio and detect <acronym>DTMF</acronym> events.</para>
				</listitem>
					<listitem>
					<programlisting language="Java" role="JAVA">
	public void onNotificationRequestResponse(NotificationRequestResponse event, ActivityContextInterface aci) {
		logger.info("onNotificationRequestResponse");

		ReturnCode status = event.getReturnCode();

		switch (status.getValue()) {
		case ReturnCode.TRANSACTION_EXECUTED_NORMALLY:
			logger.info("The Announcement should start.");
			break;
		default:
			ReturnCode rc = event.getReturnCode();
			logger.severe("RQNT failed. Value = " + rc.getValue() + " Comment = " + rc.getComment());
			
			//failed to request tts
			if(getChildSbbLocalObject().getSendBye())
			{
				getChildSbbLocalObject().sendBye();
			}
			
			break;
		}

	}
					</programlisting>
					<para><literal>onNotificationRequestResponse</literal> is invoked to indicate if <literal>getChildSbbLocalObject().sendRQNT(...)</literal> request has succeded or not. If call failed, this method requests call control to tear down communication.</para>
				</listitem>
					<listitem>
					<programlisting language="Java" role="JAVA">
	public void onNotifyRequest(Notify event, ActivityContextInterface aci) {
		logger.info("onNotifyRequest");

		NotificationRequestResponse response = new NotificationRequestResponse(event.getSource(),
				ReturnCode.Transaction_Executed_Normally);
		response.setTransactionHandle(event.getTransactionHandle());

		((JainMgcpProvider)getMgcpProvider()).sendMgcpEvents(new JainMgcpEvent[] { response });

		EventName[] observedEvents = event.getObservedEvents();

		boolean success = false;
		String audioFile = null;
		for (EventName observedEvent : observedEvents) {
			switch (observedEvent.getEventIdentifier().intValue()) {
			case MgcpEvent.REPORT_ON_COMPLETION: <co id="example.user.co1"/>
				logger.info("Announcemnet Completed NTFY received");
				if(this.getSendBye() &amp;&amp; getChildSbbLocalObject().getSendBye())
				{
					getChildSbbLocalObject().sendBye();
				}
				break;
			case MgcpEvent.REPORT_FAILURE:<co id="example.user.co2"/>
				logger.info("Announcemnet Failed received");
		
				if(getChildSbbLocalObject().getSendBye())
				{
					getChildSbbLocalObject().sendBye();
				}
				break;
			
			case MgcpEvent.DTMF_1:<co id="example.user.co3"/>
				logger.info("You have pressed 1");
				//sendRQNT(DTMF_1, false);
				success = true;
				audioFile=onDtmf1();
				break;
			case MgcpEvent.DTMF_2:<co id="example.user.co4"/>
				logger.info("You have pressed 2");
				//sendRQNT(DTMF_2, false);
				success = true;
				audioFile=onDtmf2();
				break;
			
			default:<co id="example.user.co5"/>
				logger.info("Received undefined DTMF digit(Order approved?).");
				audioFile = onDefaultDtmf();
				break;
			}
			
		}
		
		if(audioFile!=null)
		{	<co id="example.user.co6"/>
			CallControlSbbLocalObject child = getChildSbbLocalObject();
			child.sendRQNT(null, audioFile, true);
		}
	   
	    if(success)
		{<co id="example.user.co7"/>
			setSendBye(success);
		}
	}
	
	

	private String onDefaultDtmf() {
		return (getClass().getResource(orderReConfirm)).toString();

	}

	private String onDtmf2() {
		String audioFile = ((getClass().getResource(orderCancelled)).toString());
		EntityManager mgr = null;
		Order order = null;
		mgr = emf.createEntityManager();

		order = (Order) mgr.createQuery(
				"select o from Order o where o.orderId = :orderId")
				.setParameter("orderId", this.getCustomEvent().getOrderId())
				.getSingleResult();

		order.setStatus(Order.Status.CANCELLED);

		mgr.flush();
		mgr.close();


		try {
			NullActivity nullActivity = getNullActivityFactory()
					.createNullActivity();

			ActivityContextInterface nullActivityContextInterface = getNullACIFactory()
					.getActivityContextInterface(nullActivity);

			fireOrderCancelled((CustomEvent) this.getCustomEvent().clone(),
					nullActivityContextInterface, null);

		} catch (UnrecognizedActivityException unreActExc) {
			unreActExc.printStackTrace();
		}
		return audioFile;
	}

	private String onDtmf1() {
		EntityManager mgr = null;
		Order order = null;
		String audioFile = ((getClass().getResource(orderConfirmed)).toString());
		mgr = emf.createEntityManager();

		order = (Order) mgr.createQuery(
				"select o from Order o where o.orderId = :orderId")
				.setParameter("orderId", this.getCustomEvent().getOrderId())
				.getSingleResult();

		order.setStatus(Order.Status.OPEN);

		mgr.flush();
		mgr.close();
		return audioFile;

	}
					</programlisting>
					<para><literal>onNotifyRequest</literal> is invoked to indicate that atleast one event(previously requested for detection) has been detected. Depening on event type, handler performs different actions:</para>
					<calloutlist>
						<callout arearefs="example.user.co1">
							<para>Tear down call if notification has ended and flag (this.getSendBye) is set. This will happen once user press <acronym>DTMF</acronym>.</para>
						</callout>
						<callout arearefs="example.user.co2">
							<para>Announcement failed, request call control to tear down communication.</para>
						</callout>
						<callout arearefs="example.user.co3">
							<para>User punched <acronym>DTMF(1)</acronym>, perform accept on database order with <acronym>JPA</acronym>, set audio file <acronym>URL</acronym> to play, mark operation as success(this will set <literal>sendBye</literal> flag to true). </para>
						</callout>
						<callout arearefs="example.user.co4">
							<para>User punched <acronym>DTMF(2)</acronym>, perform cancel on database order with <acronym>JPA</acronym>, set audio file <acronym>URL</acronym> to play, mark operation as success(this will set <literal>sendBye</literal> flag to true). </para>
						</callout>
						<callout arearefs="example.user.co5">
							<para>On not defined <acronym>DTMF</acronym>, request audio file with requery request.</para>
						</callout>
						<callout arearefs="example.user.co6">
							<para>Play file if its present.</para>
						</callout>
						<callout arearefs="example.user.co7">
							<para>Set flag value.</para>
						</callout>
					</calloutlist>
				</listitem>
			</itemizedlist>
			
		</section>
		<section>
			<title>State transition</title>
			<para><literal>UserSbb</literal> follows state depicted on diagram below:</para>
			<mediaobject>
				<imageobject>
					<imagedata width="300px" align="center" fileref="images/source-slee2.png"
						format="PNG" />
				</imageobject>
				<caption>
					<para><literal>UserSbb</literal> <acronym>FSM</acronym> </para>
				</caption>
			</mediaobject>
		</section>
	</section>
	<section id="source_slee_admin">
		<title>Admin</title>
		<para><literal>AdminSbb</literal> is root <acronym>SBB</acronym> of service responsible of contacting adminstrator.</para>
		<para>Class <literal>org.mobicents.slee.service.admin.AdminSbb</literal> includes all the service logic for the example(except signaling). 
		<literal>AdminSbb</literal> is responsbile for contacting admin in two cases: </para>
		<itemizedlist>
			<listitem>
				<para>to accept placed order for user, it is triggered conditionaly - please refer to <xref linkend="design_web"/> and <xref linkend="source_web"/> for details.</para>
			</listitem>
			<listitem>
				<para>to accept order once user sets shipping date.</para>
			</listitem>
		</itemizedlist>
		<section id="source_slee_admin_descriptor">
			<title>Descriptor</title>
		<para><literal>AdminSbb</literal> is declared with <acronym>SBB</acronym> descriptor. Full declaration is embed in <acronym>XML</acronym> tag(<literal>&lt;sbb&gt;</literal>) in <filename>sbb-jar.xml</filename> file, it has following content: </para>
		<variablelist>
			<varlistentry>
				<term><acronym>SBB</acronym> class and ID definition</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<<description>Seam DVD Example Admin SBB</description>

<sbb-name>AdminSbb</sbb-name>
<sbb-vendor>org.mobicents</sbb-vendor>
<sbb-version>1.0</sbb-version>

<!-- Delegate to this child SBB after the first INVITE has been sent -->
<sbb-ref>
	<sbb-name>CallControlSbb</sbb-name>
	<sbb-vendor>org.mobicents</sbb-vendor>
	<sbb-version>1.0</sbb-version>
	<sbb-alias>CallControl</sbb-alias>
</sbb-ref>
		
		


<sbb-classes>
	<sbb-abstract-class>
		<sbb-abstract-class-name>
			org.mobicents.slee.service.admin.AdminSbb
		</sbb-abstract-class-name>
		<cmp-field>
			<cmp-field-name>timerID</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>customEvent</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>sendBye</cmp-field-name>
		</cmp-field>
    	<cmp-field>
			<cmp-field-name>childSbbLocalObject</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>ttsString</cmp-field-name>
		</cmp-field>
		
		<get-child-relation-method>
			<sbb-alias-ref>CallControl</sbb-alias-ref>
			<get-child-relation-method-name>
				getCallControlSbbChild
			</get-child-relation-method-name>
			<default-priority>3</default-priority>
		</get-child-relation-method>
	</sbb-abstract-class>
</sbb-classes>

					
					]]>
				</programlisting>
				<para><acronym>AdminSbb</acronym> descriptor declares  following <acronym>CMP</acronym> fields: </para>
				<itemizedlist>
					<listitem>
						<para>timerId - to hold <literal>TimerID</literal> of running timer.</para>
					</listitem>
					<listitem>
						<para>ttsString - text to be played to <acronym>UA</acronym>. </para>
					</listitem>
					<listitem>
						<para>childSbbLocalObject -  to hold reference to child <acronym>SBB</acronym> <literal>local object</literal>(call control) </para>
					</listitem>
					<listitem>
						<para>customEvent - to hold reference to example custom object received.</para>
					</listitem>
					<listitem>
						<para>sendBye - to hold flag indicating if call control should send <acronym>SIP</acronym> <literal>BYE</literal> to terminate call.</para>
					</listitem>
				</itemizedlist>
				<para><literal>AdminSbb</literal> descriptor declares also child reference to call control <acronym>SBB</acronym> (by declaring child relation metho) </para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><acronym>MGCP</acronym> event handlers</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<event event-direction="Receive" initial-event="False">
	<event-name>NotificationRequestResponse</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.NOTIFICATION_REQUEST_RESPONSE
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>

<event event-direction="Receive" initial-event="False">
	<event-name>NotifyRequest</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.NOTIFY
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
<event event-direction="Receive" initial-event="False">
	<event-name>CreateConnectionResponse</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.CREATE_CONNECTION_RESPONSE
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
						]]>
					</programlisting>
					<para>Declared event handlers are:</para>
					<itemizedlist>
						<listitem>
							<para>NotificationRequestResponse - called to indicate status of call control reqest for audio playback </para>
						</listitem>
						<listitem>
							<para>NotifyRequest - called no indicate that requested event has been detected</para>
						</listitem>
						<listitem>
							<para>CreateConnectionResponse - called to indicate <acronym>CRCX</acronym> request result</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Custom events</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<event event-direction="Receive" initial-event="True">
	<event-name>OrderPlaced</event-name>
	<event-type-ref>
		<event-type-name>
			org.mobicents.slee.service.sfdemo.ORDER_PLACED
		</event-type-name>
		<event-type-vendor>org.mobicents</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
	<initial-event-select variable="ActivityContext" />
</event>

<event event-direction="Receive" initial-event="True">
	<event-name>BeforeOrderProcessed</event-name>
	<event-type-ref>
		<event-type-name>
			org.mobicents.slee.service.dvddemo.BEFORE_ORDER_PROCESSED
		</event-type-name>
		<event-type-vendor>org.mobicents</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
	<initial-event-selector-method-name>
		orderIdSelect
	</initial-event-selector-method-name>
</event>

<event event-direction="Receive" initial-event="True">
	<event-name>OrderCancelled</event-name>
	<event-type-ref>
		<event-type-name>
			org.mobicents.slee.service.dvddemo.ORDER_CANCELLED
		</event-type-name>
		<event-type-vendor>org.mobicents</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
	<initial-event-selector-method-name>
		orderIdSelect
	</initial-event-selector-method-name>
</event>

<event event-direction="Receive" initial-event="False">
	<event-name>OrderRejected</event-name>
	<event-type-ref>
		<event-type-name>
			org.mobicents.slee.service.dvddemo.ORDER_REJECTED
		</event-type-name>
		<event-type-vendor>org.mobicents</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
<event event-direction="Receive" initial-event="False">
	<event-name>OrderApproved</event-name>
	<event-type-ref>
		<event-type-name>
			org.mobicents.slee.service.dvddemo.ORDER_APPROVED
		</event-type-name>
		<event-type-vendor>org.mobicents</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
						]]>
					</programlisting>
					<para>Declared event handlers are:</para>
					<itemizedlist>
						<listitem>
							<para>OrderPlaced - invoked once order has been placed by user. Note different event name than in <xref linkend="source_slee_user_descriptor"/></para>
						</listitem>
						<listitem>
							<para>BeforeOrderProcessed - invoked after user punches shipping date for order.</para>
						</listitem>
						<listitem>
							<para>OrderRejected - invoked in case adminstrator rejects order via web interface</para>
						</listitem>
						<listitem>
							<para>OrderApproved - invoked in case adminstrator approves order via web interface</para>
						</listitem>
					</itemizedlist>
					<note><para>Please refer to <xref linkend="design_web"/> and <xref linkend="source_web"/> for details on event firing conditions.</para>  </note>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>SLEE generic events</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<event event-direction="Receive" initial-event="False">
	<event-name>TimerEvent</event-name>
	<event-type-ref>
		<event-type-name>
			javax.slee.facilities.TimerEvent
		</event-type-name>
		<event-type-vendor>javax.slee</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
						]]>
					</programlisting>
					<para>Timer event handler is invoked for timer running for <literal>BeforeOrderProcessed</literal> event.  </para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>configuration enviroment entries</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<env-entry>
	<description>
		SIP URI of Admin. The call will be directed to this user
		who acts as Admin (Callee)
	</description>
	<env-entry-name>adminSip</env-entry-name>
	<env-entry-type>java.lang.String</env-entry-type>
	<env-entry-value>${admin.sip}</env-entry-value>
</env-entry>
	<env-entry>
	<description>
		SIP URI of Admin. User will see this address as Caller
		Address
	</description>
	<env-entry-name>callerSip</env-entry-name>
	<env-entry-type>java.lang.String</env-entry-type>
	<env-entry-value>${caller.sip}</env-entry-value>
</env-entry>
<env-entry>
	<description>
		Maximum time (min) before a check is made for Order
		Approval by manager - value of timer delay
	</description>
	<env-entry-name>waitingTiming</env-entry-name>
		<env-entry-type>java.lang.Long</env-entry-type>
	<env-entry-value>
		${order.approval.waitingtime}
	</env-entry-value>
</env-entry>
					]]>
					</programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><acronym>RA</acronym> bindings</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<resource-adaptor-type-binding>
	<resource-adaptor-type-ref>
		<resource-adaptor-type-name>
			JAIN SIP
		</resource-adaptor-type-name>
		<resource-adaptor-type-vendor>
			javax.sip
		</resource-adaptor-type-vendor>
		<resource-adaptor-type-version>
			1.2
		</resource-adaptor-type-version>
	</resource-adaptor-type-ref>
	<activity-context-interface-factory-name>
		slee/resources/jainsip/1.2/acifactory
	</activity-context-interface-factory-name>
	<resource-adaptor-entity-binding>
		<resource-adaptor-object-name>
			slee/resources/jainsip/1.2/provider
		</resource-adaptor-object-name>
			<resource-adaptor-entity-link>
			SipRA
		</resource-adaptor-entity-link>
	</resource-adaptor-entity-binding>
</resource-adaptor-type-binding>

<resource-adaptor-type-binding>
	<resource-adaptor-type-ref>
		<resource-adaptor-type-name>
			jain-mgcp
		</resource-adaptor-type-name>
		<resource-adaptor-type-vendor>
			net.java
		</resource-adaptor-type-vendor>
		<resource-adaptor-type-version>
			2.0
		</resource-adaptor-type-version>
	</resource-adaptor-type-ref>
	<activity-context-interface-factory-name>
		slee/resources/jainmgcp/2.0/acifactory/demo
	</activity-context-interface-factory-name>
	<resource-adaptor-entity-binding>
		<resource-adaptor-object-name>
			slee/resources/jainmgcp/2.0/provider/demo
		</resource-adaptor-object-name>
		<resource-adaptor-entity-link>
			MGCPRA
		</resource-adaptor-entity-link>
	</resource-adaptor-entity-binding>
</resource-adaptor-type-binding>
					]]>
					</programlisting>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist>
		
		</section>
		<section id="source_slee_user_custom_event">
			<title>Custom event handlers</title>
			<para><literal>AdminSbb</literal> declares five custom event handlers:</para>
			<itemizedlist>
				<listitem>
					<programlisting language="Java" role="JAVA">
public void onOrderPlaced(CustomEvent event, ActivityContextInterface ac) {

	logger.info("AdminSbb: " + this + ": received an ORDER_PLACED event. OrderId = " + event.getOrderId()
			+ ". ammount = " + event.getAmmount() + ". Customer Name = " + event.getCustomerName());
	<co id="example.admin1.co1"/>
	this.setCustomEvent(event);
	<co id="example.admin1.co2"/>
	StringBuffer stringBuffer = new StringBuffer();
	stringBuffer.append(event.getCustomerName());
	stringBuffer.append(" has placed an order of $");
	stringBuffer.append(event.getAmmount());
	stringBuffer.append(". Press 1 to approve and 2 to reject.");
	<co id="example.admin1.co3"/>
	setTtsString(stringBuffer.toString());
	<co id="example.admin1.co4"/>
	this.setSendBye(false);
	<co id="example.admin1.co5"/>
	makeCall(ac);

}
					</programlisting>
					<para>Order placed event is received condiationaly, depending on <acronym>JBPM</acronym> flow. It indicates that user has placed order, but it needs to be approved by administrator for further processing. This handler performs following actions: </para>
					<calloutlist>
						<callout arearefs="example.admin1.co1">
					       	<para>Store event in <acronym>CMP</acronym> </para>
		       			</callout>
						<callout arearefs="example.admin1.co2">
					       	<para>Create text to be played as audio </para>
		       			</callout>
		       			<callout arearefs="example.admin1.co3">
					       	<para>Store text in <acronym>CMP</acronym> </para>
		       			</callout>
		       			<callout arearefs="example.admin1.co4">
					       	<para>Set flag</para>
		       			</callout>
		       			<callout arearefs="example.admin1.co5">
					       	<para>Initiate call with admins <acronym>UA</acronym>, please refer to <xref linkend="source_slee_user_custom_event"/> for better understanding of call process. Once call procedure is finished stored text is played.</para>
		       			</callout>
       			</calloutlist>
				</listitem>
				<listitem>
					<programlisting language="Java" role="JAVA">
public void onBeforeOrderProcessed(CustomEvent event, ActivityContextInterface ac) {
	logger.info("AdminSbb: " + this + ": received an BEFORE_ORDER_PROCESSED event. OrderId = " + event.getOrderId()
			+ ". ammount = " + event.getAmmount() + ". Customer Name = " + event.getCustomerName());
	<co id="example.admin2.co1"/>
	this.setCustomEvent(event);
	<co id="example.admin2.co2"/>
	StringBuffer stringBuffer = new StringBuffer();
	stringBuffer.append(event.getCustomerName());
	stringBuffer.append(" has placed an order of $");
	stringBuffer.append(event.getAmmount());
	stringBuffer.append(". Press 1 to approve and 2 to reject.");
	setTtsString(stringBuffer.toString());<co id="example.admin2.co3"/>
	<co id="example.admin2.co4"/>
	setTimer(ac);
}

public void onTimerEvent(TimerEvent event, ActivityContextInterface aci) {
	logger.info("****** AdminSbb Recieved TimerEvent ******* ");

	<co id="example.admin2.co5"/>
	makeCall(aci);
}
					</programlisting>
					<para><literal>BeforeOrderProcessed</literal> event is received once user punches shipping date. Along with <literal>Timer</literal> event handler it holds logic to inform administrator. This handlers performs following actions: </para>
					<calloutlist>
						<callout arearefs="example.admin2.co1">
					       	<para>Store event in <acronym>CMP</acronym> </para>
		       			</callout>
		       			<callout arearefs="example.admin2.co2">
					       	<para>Create text to be played as audio</para>
		       			</callout>
		       			<callout arearefs="example.admin2.co3">
					       	<para>Store text in <acronym>CMP</acronym> </para>
		       			</callout>
		       			<callout arearefs="example.admin2.co4">
					       	<para>Create timer on passed <acronym>ACI</acronym> - timer delay is equal to configured delay(see descriptor)</para>
		       			</callout>
		       			<callout arearefs="example.admin2.co5">
					       	<para>On timer event, initiate call</para>
		       			</callout>
       			</calloutlist>
				</listitem>
				<listitem>
					<programlisting language="Java" role="JAVA">
	public void onOrderCancelled(CustomEvent event, ActivityContextInterface ac) {
		logger.info("****** AdminSbb Recieved ORDER_CANCELLED ******");
		cancelTimer();
	}

	public void onOrderRejected(CustomEvent event, ActivityContextInterface ac) {

		logger.info("****** AdminSbb Recieved ORDER_REJECTED ******* ");
		cancelTimer();
	}

	public void onOrderApproved(CustomEvent event, ActivityContextInterface ac) {

		logger.info("****** AdminSbb Recieved ORDER_APPROVED ******* ");
		cancelTimer();
	}
					</programlisting>
					<para><literal>onOrderCancelled</literal>,<literal>onOrderRejected</literal> and <literal>onOrderApproved</literal> handlers are strictly for cleaning state. Events processed by those methods are fired in case administrator performs operation on order with web interface. Please refer to <literal>AdminSbb</literal> decision diagram. </para>
					
				</listitem>
			</itemizedlist>
			
		</section>
		<section id="source_slee_admin_mgcp_event">
			<title><acronym>MGCP</acronym> event handlers</title>
			<para><literal>UserSbb</literal> declares three <acronym>MGCP</acronym> event handlers:</para>
			<itemizedlist>
				<listitem>
					<programlisting language="Java" role="JAVA">
	public void onCreateConnectionResponse(CreateConnectionResponse event, ActivityContextInterface aci)
	{
		if(event.getSecondEndpointIdentifier()!=null)
		{
			//we have media path estabilished.
			getChildSbbLocalObject().sendRQNT(getTtsString(), null, true);
			this.setTtsString(null);
		}
	}
					</programlisting>
					<para><literal>onCreateConnectionResponse</literal> is invoked once child call control establishes media path. It requests call control to play text as audio and detect <acronym>DTMF</acronym> events.</para>
				</listitem>
					<listitem>
					<programlisting language="Java" role="JAVA">
	public void onNotificationRequestResponse(NotificationRequestResponse event, ActivityContextInterface aci) {
		logger.info("onNotificationRequestResponse");

		ReturnCode status = event.getReturnCode();

		switch (status.getValue()) {
		case ReturnCode.TRANSACTION_EXECUTED_NORMALLY:
			logger.info("The Announcement should start.");
			break;
		default:
			ReturnCode rc = event.getReturnCode();
			logger.severe("RQNT failed. Value = " + rc.getValue() + " Comment = " + rc.getComment());

			cancelTimer();
			if(getChildSbbLocalObject().getSendBye())
			{
				getChildSbbLocalObject().sendBye();
			}
			
			break;
		}

	}
					</programlisting>
					<para><literal>onNotificationRequestResponse</literal> is invoked to indicate if <literal>getChildSbbLocalObject().sendRQNT(...)</literal> request has succeded or not. If call failed, this method requests call control to tear down communication.</para>
				</listitem>
					<listitem>
					<programlisting language="Java" role="JAVA">
	public void onNotifyRequest(Notify event, ActivityContextInterface aci) {
		logger.info("onNotifyRequest");

		NotificationRequestResponse response = new NotificationRequestResponse(event.getSource(),
				ReturnCode.Transaction_Executed_Normally);
		response.setTransactionHandle(event.getTransactionHandle());

		((JainMgcpProvider)getMgcpProvider()).sendMgcpEvents(new JainMgcpEvent[] { response });

		EventName[] observedEvents = event.getObservedEvents();

		boolean success = false;
		for (EventName observedEvent : observedEvents) {
			switch (observedEvent.getEventIdentifier().intValue()) {
			case MgcpEvent.REPORT_ON_COMPLETION:<co id="example.admin3.co1"/>
				logger.info("Announcemnet Completed NTFY received");
				if(this.getSendBye() &amp;&amp; getChildSbbLocalObject().getSendBye())
				{
					getChildSbbLocalObject().sendBye();
				}
				break;
			case MgcpEvent.REPORT_FAILURE:<co id="example.admin3.co2"/>
				logger.info("Announcemnet Failed received");
				if(getChildSbbLocalObject().getSendBye())
				{
					getChildSbbLocalObject().sendBye();
				}
				break;
			
			case MgcpEvent.DTMF_1:<co id="example.admin3.co3"/>
				logger.info("You have pressed 1");
				//sendRQNT(DTMF_1, false);
				success = true;
				onDtmf1();
				break;
			case MgcpEvent.DTMF_2:<co id="example.admin3.co4"/>
				logger.info("You have pressed 2");
				//sendRQNT(DTMF_2, false);
				success = true;
				onDtmf2();
				break;
			
			default:<co id="example.admin3.co5"/>
				logger.info("Received undefined DTMF digit(Order approved?).");
				onDefaultDtmf();
				break;
			}
			
		}
		if(success)
		{<co id="example.admin3.co6"/>
			setSendBye(success);
		}
	}
	
	private void onDtmf1() {

		EntityManager mgr = null;
		Order order = null;

		String audioFile = null;


		audioFile = (getClass().getResource(orderApproved)).toString();


			mgr = emf.createEntityManager();

			order = (Order) mgr
					.createQuery(
							"select o from Order o where o.orderId = :orderId")
					.setParameter("orderId", this.getCustomEvent().getOrderId())
					.getSingleResult();

			order.setStatus(Order.Status.PROCESSING);

			mgr.flush();
			mgr.close();
		
		
		getChildSbbLocalObject().sendRQNT(null, audioFile, true);
	}
	private void onDtmf2()
	{
		EntityManager mgr = null;
		Order order = null;
		String audioFile = null;

		
		audioFile = (getClass().getResource(orderCancelled)).toString();

			mgr = emf.createEntityManager();

			order = (Order) mgr.createQuery("select o from Order o where o.orderId = :orderId").setParameter(
					"orderId", this.getCustomEvent().getOrderId()).getSingleResult();

			order.setStatus(Order.Status.CANCELLED);

			mgr.flush();
			mgr.close();
	
		getChildSbbLocalObject().sendRQNT(null, audioFile, true);
	}
	private void onDefaultDtmf()
	{
		String audioFile = (getClass().getResource(orderReConfirm)).toString();
		getChildSbbLocalObject().sendRQNT(null, audioFile, false);
	}
					</programlisting>
					<para><literal>onNotifyRequest</literal> is invoked to indicate that atleast one event(previously requested for detection) has been detected. Depening on event type, handler performs different actions:</para>
					<calloutlist>
						<callout arearefs="example.admin3.co1">
							<para>Tear down call if notification has ended and flag (this.getSendBye) is set. This will happen once user press <acronym>DTMF</acronym>.</para>
						</callout>
						<callout arearefs="example.admin3.co2">
							<para>Announcement failed, request call control to tear down communication.</para>
						</callout>
						<callout arearefs="example.admin3.co3">
							<para>User punched DTMF(1), perform accept on database order with JPA, set audio file URL to play, mark operation as success(this will set sendBye flag to true).</para>
						</callout>
						<callout arearefs="example.admin3.co4">
							<para>User punched DTMF(2), perform cancel on database order with JPA, set audio file URL to play, mark operation as success(this will set sendBye flag to true).</para>
						</callout>
						<callout arearefs="example.admin3.co5">
							<para>On not defined DTMF, request audio file with requery request.</para>
						</callout>
						<callout arearefs="example.admin3.co6">
							<para>Set flag value.</para>
						</callout>
						
					</calloutlist>
				</listitem>
			</itemizedlist>
			
		</section>
		<section>
			<title>State transition</title>
			<para><literal>adminSbb</literal> follows state depicted on diagram below:</para>
			<mediaobject>
				<imageobject>
					<imagedata width="300px" align="center" fileref="images/source-slee3.png"
						format="PNG" />
				</imageobject>
				<caption>
					<para><literal>UserSbb</literal> <acronym>FSM</acronym> </para>
				</caption>
			</mediaobject>
		</section>
	</section>
	<section id="source_slee_order_date">
		<title>DeliveryOrderDate</title>
		<para></para>
	</section>
	<section id="source_slee_ship_date">
		<title>DeliveryShipDate</title>
		<para><literal>OrderShipDateSbb</literal> is root <acronym>SBB</acronym> of service handlign logic to contact user and notify him that his order will be delivered on certain date.	
		</para>
		<para><acronym>SBB</acronym> class <literal>org.mobicents.slee.service.user.ship.OrderShipDateSbb</literal> contains all logic and required resources to contact user. 
		</para>
		<section id="source_slee_ship_date_descriptor">
			<title>Descriptor</title>
		<para><literal>OrderShipDateSbb</literal> is declared with <acronym>SBB</acronym> descriptor. Full declaration is embed in <acronym>XML</acronym> tag(<literal>&lt;sbb&gt;</literal>) in <filename>sbb-jar.xml</filename> file, it has following content: </para>
		<variablelist>
			<varlistentry>
				<term><acronym>SBB</acronym> class and ID definition</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<description>
	OrderShipDateSbb is used to remind user when order will be delivered
</description>

<sbb-name>OrderShipDateSbb</sbb-name>
<sbb-vendor>org.mobicents</sbb-vendor>
<sbb-version>1.0</sbb-version>
		
<!-- Delegate to this child SBB after the first INVITE has been sent -->
<sbb-ref>
	<sbb-name>CallControlSbb</sbb-name>
	<sbb-vendor>org.mobicents</sbb-vendor>
	<sbb-version>1.0</sbb-version>
	<sbb-alias>CallControl</sbb-alias>
</sbb-ref>

<sbb-classes>
	<sbb-abstract-class>
		<sbb-abstract-class-name>
			org.mobicents.slee.service.user.ship.OrderShipDateSbb
		</sbb-abstract-class-name>
		<cmp-field>
			<cmp-field-name>customEvent</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>childSbbLocalObject</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>ttsString</cmp-field-name>
		</cmp-field>
		
		<get-child-relation-method>
			<sbb-alias-ref>CallControl</sbb-alias-ref>
			<get-child-relation-method-name>
				getCallControlSbbChild
			</get-child-relation-method-name>
			<default-priority>3</default-priority>
		</get-child-relation-method>
	</sbb-abstract-class>
</sbb-classes>
					
					]]>
				</programlisting>
				<para><acronym>OrderShipDateSbb</acronym> descriptor declares following <acronym>CMP</acronym> fields: </para>
				<itemizedlist>
					<listitem>
						<para>ttsString - text to be played to <acronym>UA</acronym>. </para>
					</listitem>
					<listitem>
						<para>childSbbLocalObject -  to hold reference to child <acronym>SBB</acronym> <literal>local object</literal>(call control) </para>
					</listitem>
					<listitem>
						<para>customEvent - to hold reference to example custom object received.</para>
					</listitem>
				</itemizedlist>
				<para><literal>OrderShipDateSbb</literal> descriptor declares also child reference to call control <acronym>SBB</acronym> (by declaring child relation metho) </para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><acronym>MGCP</acronym> event handlers</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<!-- MGCP events  -->
<event event-direction="Receive" initial-event="False">
	<event-name>NotificationRequestResponse</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.NOTIFICATION_REQUEST_RESPONSE
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
		
<event event-direction="Receive" initial-event="False">
	<event-name>NotifyRequest</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.NOTIFY
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
<event event-direction="Receive" initial-event="False">
	<event-name>CreateConnectionResponse</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.CREATE_CONNECTION_RESPONSE
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
						]]>
					</programlisting>
					<para>Declared event handlers are:</para>
					<itemizedlist>
						<listitem>
							<para>NotificationRequestResponse - called to indicate status of call control reqest for audio playback </para>
						</listitem>
						<listitem>
							<para>NotifyRequest - called no indicate that requested event has been detected</para>
						</listitem>
						<listitem>
							<para>CreateConnectionResponse - called to indicate <acronym>CRCX</acronym> request result</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Custom events</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<event event-direction="Receive" initial-event="True">
	<event-name>OrderShipped</event-name>
	<event-type-ref>
		<event-type-name>
			org.mobicents.slee.service.dvddemo.ORDER_SHIPPED
		</event-type-name>
		<event-type-vendor>org.mobicents</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
	<initial-event-select variable="ActivityContext" />
</event>
						]]>
					</programlisting>
					<para>Declared event handlers are:</para>
					<itemizedlist>
						<listitem>
							<para>OrderShipped - invoked once order has been shipped to customer(ship date has been set). </para>
						</listitem>
					</itemizedlist>
					<note><para>Please refer to <xref linkend="design_web"/> and <xref linkend="source_web"/> for details on event firing conditions.</para>  </note>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>configuration enviroment entries</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<env-entry>
	<description>
		SIP URI of Admin. User will see this address as Caller
		Address
	</description>
	<env-entry-name>callerSip</env-entry-name>
	<env-entry-type>java.lang.String</env-entry-type>
	<env-entry-value>${caller.sip}</env-entry-value>
</env-entry>
					]]>
					</programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><acronym>RA</acronym> bindings</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<resource-adaptor-type-binding>
	<resource-adaptor-type-ref>
		<resource-adaptor-type-name>
			JAIN SIP
		</resource-adaptor-type-name>
		<resource-adaptor-type-vendor>
			javax.sip
		</resource-adaptor-type-vendor>
		<resource-adaptor-type-version>
			1.2
		</resource-adaptor-type-version>
	</resource-adaptor-type-ref>
	<activity-context-interface-factory-name>
		slee/resources/jainsip/1.2/acifactory
	</activity-context-interface-factory-name>
	<resource-adaptor-entity-binding>
		<resource-adaptor-object-name>
			slee/resources/jainsip/1.2/provider
		</resource-adaptor-object-name>
			<resource-adaptor-entity-link>
			SipRA
		</resource-adaptor-entity-link>
	</resource-adaptor-entity-binding>
</resource-adaptor-type-binding>

<resource-adaptor-type-binding>
	<resource-adaptor-type-ref>
		<resource-adaptor-type-name>
			jain-mgcp
		</resource-adaptor-type-name>
		<resource-adaptor-type-vendor>
			net.java
		</resource-adaptor-type-vendor>
		<resource-adaptor-type-version>
			2.0
		</resource-adaptor-type-version>
	</resource-adaptor-type-ref>
	<activity-context-interface-factory-name>
		slee/resources/jainmgcp/2.0/acifactory/demo
	</activity-context-interface-factory-name>
	<resource-adaptor-entity-binding>
		<resource-adaptor-object-name>
			slee/resources/jainmgcp/2.0/provider/demo
		</resource-adaptor-object-name>
		<resource-adaptor-entity-link>
			MGCPRA
		</resource-adaptor-entity-link>
	</resource-adaptor-entity-binding>
</resource-adaptor-type-binding>
					]]>
					</programlisting>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist>
		</section>
		<section id="source_slee_ship_date_custom_event">
			<title>Custom event handlers</title>
			<para><literal>OrderShipDateSbb</literal> declares one custom event handler:</para>
			<itemizedlist>
				
				<listitem>
					<programlisting language="Java" role="JAVA">
public void onOrderShipped(CustomEvent event, ActivityContextInterface ac) {
	logger.info("======== OrderShipDateSbb ORDER_SHIPPED ========");
	ac.detach(this.getSbbContext().getSbbLocalObject());<co id="example.ship1.co1"/>
	makeCall(event, ac);<co id="example.ship1.co2"/>
}

private void makeCall(CustomEvent event, ActivityContextInterface ac) {

	EntityManager mgr = null;<co id="example.ship1.co3"/>
	Order order = null;
	this.setCustomEvent(event);

	mgr = emf.createEntityManager();
	order = (Order) mgr.createQuery("select o from Order o where o.orderId = :orderId").setParameter("orderId",
	this.getCustomEvent().getOrderId()).getSingleResult();
	Timestamp orderDate = order.getDeliveryDate();
	mgr.close();
		
	<co id="example.ship1.co4"/>
	StringBuffer stringBuffer = new StringBuffer();
	stringBuffer.append("Welcome ");
	stringBuffer.append(event.getCustomerName());
	stringBuffer.append(". This is a reminedr call for your order number ");
	stringBuffer.append(event.getOrderId());
	stringBuffer.append(". The shippment will be at your door step on .");
	stringBuffer.append(orderDate.getDate());
	stringBuffer.append(" of ");

	String month = null;
	switch (orderDate.getMonth()) {
	case 0:
	month = "January";
		break;
	case 1:
		month = "February";
		break;
	case 2:
		month = "March";
		break;
	case 3:
		month = "April";
		break;
	case 4:
		month = "May";
		break;
	case 5:
		month = "June";
		break;
	case 6:
		month = "July";
		break;
	case 7:
		month = "August";
		break;
	case 8:
		month = "September";
		break;
	case 9:
		month = "October";
		break;
	case 10:
		month = "November";
		break;
	case 11:
		month = "December";
		break;
	default:
		break;
	}
	stringBuffer.append(month);
	stringBuffer.append(" ");
	stringBuffer.append(1900 + orderDate.getYear());
	stringBuffer.append(" at ");
	stringBuffer.append(orderDate.getHours());
	stringBuffer.append(" hour and ");
	stringBuffer.append(orderDate.getMinutes());
	stringBuffer.append(" minute. Thank you. Bye.");
	<co id="example.ship1.co5"/>
	setTtsString(stringBuffer.toString());
	try {
	
		// Set the caller address to the address of our call controller
		...<co id="example.ship1.co6"/>
	} catch (ParseException parExc) {
		logger.severe("Parse Exception while parsing the callerAddess", parExc);
	} catch (InvalidArgumentException invalidArgExcep) {
		logger.severe("InvalidArgumentException while building Invite Request", invalidArgExcep);
	} catch (TransactionUnavailableException tranUnavExce) {
		logger.severe("TransactionUnavailableException when trying to getNewClientTransaction", tranUnavExce);
	} catch (UnrecognizedActivityException e) {
		// TODO Auto-generated catch block
		logger.severe("UnrecognizedActivityException when trying to getActivityContextInterface", e);
	} catch (CreateException creaExce) {
		logger.severe("CreateException while trying to create Child", creaExce);
	} catch (SipException sipExec) {
		logger.severe("SipException while trying to send INVITE Request", sipExec);
	}

}
					</programlisting>
					<para>This handler performs following actions: </para>
					<calloutlist>
						<callout arearefs="example.ship1.co1">
					       	<para>Detach from activity to make it eligible for reclamation</para>
		       			</callout>
		       			<callout arearefs="example.ship1.co2">
					       	<para>Start call procedure</para>
		       			</callout>
		       			<callout arearefs="example.ship1.co3">
					       	<para>Lookup order data from database </para>
		       			</callout>
		       			<callout arearefs="example.ship1.co4">
					       	<para>Create text to be played</para>
		       			</callout>
		       			<callout arearefs="example.ship1.co5">
					       	<para>Store text in <acronym>CMP</acronym> </para>
		       			</callout>
		       			<callout arearefs="example.ship1.co6">
					       	<para>Initiate call procedure, refer to source and <xref linkend="source_slee_user_custom_event"/>.</para>
		       			</callout>
		       			
       			</calloutlist>
				</listitem>
			</itemizedlist>
		</section>
		<section id="source_slee_user_mgcp_event">
			<title><acronym>MGCP</acronym> event handlers</title>
			<para><literal>OrderShipDateSbb</literal> declares three <acronym>MGCP</acronym> event handlers:</para>
			<itemizedlist>
				<listitem>
					<programlisting language="Java" role="JAVA">
public void onCreateConnectionResponse(CreateConnectionResponse event, ActivityContextInterface aci)
{
	//just in case
	if(event.getSecondEndpointIdentifier()!=null)
	{
		//we have media path estabilished.
		getChildSbbLocalObject().sendRQNT(getTtsString(), null, true);
		this.setTtsString(null);
	}
}
					</programlisting>
					<para><literal>onCreateConnectionResponse</literal> is invoked once child call control establishes media path. It requests call control to play text as audio and detect <acronym>DTMF</acronym> events.</para>
				</listitem>
					<listitem>
					<programlisting language="Java" role="JAVA">
public void onNotificationRequestResponse(NotificationRequestResponse event, ActivityContextInterface aci) {
	logger.info("onNotificationRequestResponse");

	ReturnCode status = event.getReturnCode();

	switch (status.getValue()) {
	case ReturnCode.TRANSACTION_EXECUTED_NORMALLY:
		logger.info("The Announcement should have been started");
		break;
	default:
		ReturnCode rc = event.getReturnCode();
		logger.severe("RQNT failed. Value = " + rc.getValue() + " Comment = " + rc.getComment());


		if(getChildSbbLocalObject().getSendBye())
		{
			getChildSbbLocalObject().sendBye();
		}
		
		break;
	}
}
					</programlisting>
					<para><literal>onNotificationRequestResponse</literal> is invoked to indicate if <literal>getChildSbbLocalObject().sendRQNT(...)</literal> request has succeded or not. If call failed, this method requests call control to tear down communication.</para>
				</listitem>
					<listitem>
					<programlisting language="Java" role="JAVA">
public void onNotifyRequest(Notify event, ActivityContextInterface aci) {
	logger.info("onNotifyRequest");

	NotificationRequestResponse response = new NotificationRequestResponse(event.getSource(),
			ReturnCode.Transaction_Executed_Normally);
	response.setTransactionHandle(event.getTransactionHandle());
	((JainMgcpProvider)getMgcpProvider()).sendMgcpEvents(new JainMgcpEvent[] { response });
	EventName[] observedEvents = event.getObservedEvents();

	for (EventName observedEvent : observedEvents) {
		switch (observedEvent.getEventIdentifier().intValue()) {
		case MgcpEvent.REPORT_ON_COMPLETION:
			logger.info("Announcemnet Completed NTFY received");
			if(getChildSbbLocalObject().getSendBye())
			{
				getChildSbbLocalObject().sendBye();
			}
			break;
		case MgcpEvent.REPORT_FAILURE:
			logger.info("Announcemnet Failed received");
				if(getChildSbbLocalObject().getSendBye())
			{
				getChildSbbLocalObject().sendBye();
			}
			break;
			
			
			
		default:
			logger.info("Received undefined event.");
			break;
		}
			
	}
		
}
	
					</programlisting>
					<para><literal>onNotifyRequest</literal> is invoked to indicate that atleast one event(previously requested for detection) has been detected. Since this service ends order lifecycle in example, this handler terminates call on both - failure and succes.</para>
				</listitem>
			</itemizedlist>
			
		</section>
		
	</section>
	
</section>	