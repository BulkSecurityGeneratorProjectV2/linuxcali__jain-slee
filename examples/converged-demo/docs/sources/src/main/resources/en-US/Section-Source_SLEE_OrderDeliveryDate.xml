<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="source_slee_deliver_date">
	<title>DeliveryOrderDate</title>
	<para><literal>OrderDeliverDateSbb</literal> is root <acronym>SBB</acronym> of service handling logic to contact user and query about desired delivery date.	
	</para>
	<para><acronym>SBB</acronym> class <literal>org.mobicents.slee.service.user.delivery.OrderDeliveryDateSbb</literal> contains all logic and required resources to contact user. 
	</para>
	<section id="source_slee_deliver_date_descriptor">
			<title>Descriptor</title>
		<para><literal>OrderDeliverDateSbb</literal> is declared with <acronym>SBB</acronym> descriptor. Full declaration is embed in <acronym>XML</acronym> tag(<literal>&lt;sbb&gt;</literal>) in <filename>sbb-jar.xml</filename> file, it has following content: </para>
		<variablelist>
			<varlistentry>
				<term><acronym>SBB</acronym> class and ID definition</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<description>
	OrderDeliverDateSbb is used to set the date and time for
	Order Delivery
</description>
<sbb-name>OrderDeliverDateSbb</sbb-name>
<sbb-vendor>org.mobicents</sbb-vendor>
<sbb-version>1.0</sbb-version>
		

<!-- Delegate to this child SBB after the first INVITE has been sent -->
<sbb-ref>
	<sbb-name>CallControlSbb</sbb-name>
	<sbb-vendor>org.mobicents</sbb-vendor>
	<sbb-version>1.0</sbb-version>
	<sbb-alias>CallControl</sbb-alias>
</sbb-ref>
		
		
	
<sbb-classes>
	<sbb-abstract-class>
		<sbb-abstract-class-name>
			org.mobicents.slee.service.user.delivery.OrderDeliverDateSbb
		</sbb-abstract-class-name>
		<cmp-field>
			<cmp-field-name>customEvent</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>sendBye</cmp-field-name>
			</cmp-field>
		<cmp-field>
			<cmp-field-name>childSbbLocalObject</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>dateAndTime</cmp-field-name>
		</cmp-field>
		<cmp-field>
			<cmp-field-name>timerID</cmp-field-name>
		</cmp-field>
		<get-child-relation-method>
			<sbb-alias-ref>CallControl</sbb-alias-ref>
			<get-child-relation-method-name>
				getCallControlSbbChild
			</get-child-relation-method-name>
			<default-priority>3</default-priority>
		</get-child-relation-method>
	</sbb-abstract-class>
</sbb-classes>

					
					]]>
				</programlisting>
				<para><acronym>OrderDeliverDateSbb</acronym> descriptor declares following <acronym>CMP</acronym> fields: </para>
				<itemizedlist>
					<listitem>
						<para>timerID - ID of running timer. </para>
					</listitem>
					<listitem>
						<para>dateAndTime - text to be played to <acronym>UA</acronym>. </para>
					</listitem>
					<listitem>
						<para>childSbbLocalObject -  to hold reference to child <acronym>SBB</acronym> <literal>local object</literal>(call control) </para>
					</listitem>
					<listitem>
						<para>customEvent - to hold reference to example custom object received.</para>
					</listitem>
					<listitem>
						<para>sendBye - flag for BYE handling. </para>
					</listitem>
				</itemizedlist>
				<para><literal>OrderDeliverDateSbb</literal> descriptor declares also child reference to call control <acronym>SBB</acronym> (by declaring child relation metho) </para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><acronym>MGCP</acronym> event handlers</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<!-- MGCP events  -->
<event event-direction="Receive" initial-event="False">
	<event-name>NotificationRequestResponse</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.NOTIFICATION_REQUEST_RESPONSE
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
		
<event event-direction="Receive" initial-event="False">
	<event-name>NotifyRequest</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.NOTIFY
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
<event event-direction="Receive" initial-event="False">
	<event-name>CreateConnectionResponse</event-name>
	<event-type-ref>
		<event-type-name>
			net.java.slee.resource.mgcp.CREATE_CONNECTION_RESPONSE
		</event-type-name>
		<event-type-vendor>net.java</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
</event>
						]]>
					</programlisting>
					<para>Declared event handlers are:</para>
					<itemizedlist>
						<listitem>
							<para>NotificationRequestResponse - called to indicate status of call control reqest for audio playback </para>
						</listitem>
						<listitem>
							<para>NotifyRequest - called no indicate that requested event has been detected</para>
						</listitem>
						<listitem>
							<para>CreateConnectionResponse - called to indicate <acronym>CRCX</acronym> request result</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Custom events</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<event event-direction="Receive" initial-event="True">
	<event-name>OrderProcessed</event-name>
	<event-type-ref>
		<event-type-name>
			org.mobicents.slee.service.dvddemo.ORDER_PROCESSED
		</event-type-name>
		<event-type-vendor>org.mobicents</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
	<initial-event-selector-method-name>
		orderIdSelect
	</initial-event-selector-method-name>
</event>

<event event-direction="Receive" initial-event="True">
	<event-name>OrderApproved</event-name>
	<event-type-ref>
		<event-type-name>
			org.mobicents.slee.service.dvddemo.ORDER_APPROVED
		</event-type-name>
		<event-type-vendor>org.mobicents</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
	<initial-event-selector-method-name>
		orderIdSelect
	</initial-event-selector-method-name>
</event>

<event event-direction="Receive" initial-event="True">
	<event-name>OrderCancelled</event-name>
	<event-type-ref>
		<event-type-name>
			org.mobicents.slee.service.dvddemo.ORDER_CANCELLED
		</event-type-name>
		<event-type-vendor>org.mobicents</event-type-vendor>
		<event-type-version>1.0</event-type-version>
	</event-type-ref>
	<initial-event-selector-method-name>
		orderIdSelect
	</initial-event-selector-method-name>
</event>
						]]>
					</programlisting>
					<para>Declared event handlers are:</para>
					<itemizedlist>

					<listitem>
						<para>OrderProcessed - This event is fired from AfterOrderProcessedAction. 
						AfterOrderProcessedAction will be called automatically by JBPM when user places an order via Web UI whose value is less than 100. 
						This is Initial event for OrderDeliverDateSbb. The event handler method will set timer for 30 Seconds. On Timer expiration the System will 
						call User to punch the date and time for delivery of order.</para>
					</listitem>
					<listitem>
						<para>OrderApproved - This event is fired from OrderApprovalAction. OrderApprovalAction will be called automatically by JBPM when 
						admin logs into the Web UI to approve the order ( in case if order value is greater than 100 ). 
						This is Initial event for OrderDeliverDateSbb. The event handler method will set timer for 30 Seconds. On Timer expiration the System will 
						call User to punch the date and time for delivery of order. 
						Ideally speaking once the System calls admin to approve/reject order via phone and admin approves the order, 
						the jBPM should have been processed and called OrderApprovalAction, but there is no integration 
						between SLEE and JBPM, and hence even though Admin approved order via phone, he/she still needs to 
						log-in via UI to approve the order again. This could be easily achieved by calling a EJB from SBB and 
						delegating the JBPM processing in EJB, but I am being lazzy here ;)   </para>
					</listitem>
					<listitem>
						<para>OrderCancelled -  This event is fired from UserSbb when User cancels his/her order by pressing DTMF 2 
						when received call from System for confirmation of Order. When User places his/her Order (less than 100), 'OrderProcessed' is already fired and 
						OrderDeliverDateSbb is already set for timer. Now when System calls User to confirm order and if User rejects the Order, 
						the system should not call again latter to set date and time.  </para>
					</listitem>

					</itemizedlist>
					<note><para>Please refer to <xref linkend="design_web"/> and <xref linkend="source_web"/> for details on event firing conditions.</para>  </note>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>configuration enviroment entries</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<env-entry>
	<description>
		SIP URI of Admin. User will see this address as Caller
		Address
	</description>
	<env-entry-name>callerSip</env-entry-name>
	<env-entry-type>java.lang.String</env-entry-type>
	<env-entry-value>${caller.sip}</env-entry-value>
</env-entry>
					]]>
					</programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><acronym>RA</acronym> bindings</term>
				<listitem>
					<programlisting language="XML" role="XML"><![CDATA[
<resource-adaptor-type-binding>
	<resource-adaptor-type-ref>
		<resource-adaptor-type-name>
			JAIN SIP
		</resource-adaptor-type-name>
		<resource-adaptor-type-vendor>
			javax.sip
		</resource-adaptor-type-vendor>
		<resource-adaptor-type-version>
			1.2
		</resource-adaptor-type-version>
	</resource-adaptor-type-ref>
	<activity-context-interface-factory-name>
		slee/resources/jainsip/1.2/acifactory
	</activity-context-interface-factory-name>
	<resource-adaptor-entity-binding>
		<resource-adaptor-object-name>
			slee/resources/jainsip/1.2/provider
		</resource-adaptor-object-name>
			<resource-adaptor-entity-link>
			SipRA
		</resource-adaptor-entity-link>
	</resource-adaptor-entity-binding>
</resource-adaptor-type-binding>

<resource-adaptor-type-binding>
	<resource-adaptor-type-ref>
		<resource-adaptor-type-name>
			jain-mgcp
		</resource-adaptor-type-name>
		<resource-adaptor-type-vendor>
			net.java
		</resource-adaptor-type-vendor>
		<resource-adaptor-type-version>
			2.0
		</resource-adaptor-type-version>
	</resource-adaptor-type-ref>
	<activity-context-interface-factory-name>
		slee/resources/jainmgcp/2.0/acifactory/demo
	</activity-context-interface-factory-name>
	<resource-adaptor-entity-binding>
		<resource-adaptor-object-name>
			slee/resources/jainmgcp/2.0/provider/demo
		</resource-adaptor-object-name>
		<resource-adaptor-entity-link>
			MGCPRA
		</resource-adaptor-entity-link>
	</resource-adaptor-entity-binding>
</resource-adaptor-type-binding>
					]]>
					</programlisting>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist>
		</section>	
		<!-- 
		<section id="source_slee_deliver_date_custom_event">
			<title>Custom event handlers</title>
			<para>AMIT</para>
			
					
		</section>
		 -->
		<section id="source_slee_orderdeliverydate_mgcp_event">
			<title><acronym>MGCP</acronym> event handlers</title>
			<para><literal>OrderDeliverDateSbb</literal> declares three <acronym>MGCP</acronym> event handlers:</para>
			<itemizedlist>
				<listitem>
					<programlisting language="Java" role="JAVA">
public void onCreateConnectionResponse(CreateConnectionResponse event
	, ActivityContextInterface aci)
{   //just in case
	if(event.getSecondEndpointIdentifier()!=null)
	{
		String announcementFile = (getClass().getResource(orderDeliveryDate)).toString();
		//we have media path estabilished.
		getChildSbbLocalObject().sendRQNT(null, announcementFile, true);
	}
}
					</programlisting>
					<para><literal>onCreateConnectionResponse</literal> is invoked once child call control establishes media path. It requests call control to play text as audio and detect <acronym>DTMF</acronym> events.</para>
				</listitem>
					<listitem>
					<programlisting language="Java" role="JAVA">
public void onNotificationRequestResponse(NotificationRequestResponse event
	, ActivityContextInterface aci) {
	logger.info("onNotificationRequestResponse");
	ReturnCode status = event.getReturnCode();
	switch (status.getValue()) {
	case ReturnCode.TRANSACTION_EXECUTED_NORMALLY:
		logger.info("The Announcement should have been started");
		break;
	default:
		ReturnCode rc = event.getReturnCode();
		logger.severe("RQNT failed. Value = " + rc.getValue() + " Comment = " + rc.getComment());
		if(getChildSbbLocalObject().getSendBye())
		{
			getChildSbbLocalObject().sendBye();
		}
		
		break;
	}

}
					</programlisting>
					<para><literal>onNotificationRequestResponse</literal> is invoked to indicate if <literal>getChildSbbLocalObject().sendRQNT(...)</literal> request has succeded or not. If call failed, this method requests call control to tear down communication.</para>
				</listitem>
					<listitem>
					<programlisting language="Java" role="JAVA">
public void onNotifyRequest(Notify event, ActivityContextInterface aci) {
	logger.info("onNotifyRequest");

	NotificationRequestResponse response = new NotificationRequestResponse(event.getSource(),
			ReturnCode.Transaction_Executed_Normally);
	response.setTransactionHandle(event.getTransactionHandle());

	((JainMgcpProvider)getMgcpProvider()).sendMgcpEvents(new JainMgcpEvent[] { response });

	EventName[] observedEvents = event.getObservedEvents();

	boolean success = false;
	for (EventName observedEvent : observedEvents) {
		switch (observedEvent.getEventIdentifier().intValue()) {
		case MgcpEvent.REPORT_ON_COMPLETION:<co id="example.order1.co1"/>
			logger.info("Announcemnet Completed NTFY received");
			if(this.getSendBye() &amp;&amp; getChildSbbLocalObject().getSendBye())
			{
				getChildSbbLocalObject().sendBye();
			}
			break;
		case MgcpEvent.REPORT_FAILURE:<co id="example.order1.co2"/>
			logger.info("Announcemnet Failed received");

			if(getChildSbbLocalObject().getSendBye())
			{
				getChildSbbLocalObject().sendBye();
			}
			break;
		
		case MgcpEvent.DTMF_0:
			logger.info("You have pressed 0");
		case MgcpEvent.DTMF_1:
			logger.info("You have pressed 1");
		case MgcpEvent.DTMF_2:
			logger.info("You have pressed 2");
		case MgcpEvent.DTMF_3:
			logger.info("You have pressed 3");
		case MgcpEvent.DTMF_4:
			logger.info("You have pressed 4");
		case MgcpEvent.DTMF_5:
			logger.info("You have pressed 5");
		case MgcpEvent.DTMF_6:
			logger.info("You have pressed 6");
		case MgcpEvent.DTMF_7:
			logger.info("You have pressed 7");
		case MgcpEvent.DTMF_8:
			logger.info("You have pressed 8");
		case MgcpEvent.DTMF_9:
			logger.info("You have pressed 9");
			<co id="example.order1.co3"/>
			processDtmf(observedEvent);
				
		default:
			logger.info("Received undefined event.");

			break;
		}
			
	}
	if(success)
	{
		setSendBye(success);
	}
}
private void processDtmf(EventName event) {
	// TODO Auto-generated method stub
	String dateAndTime = this.getDateAndTime();
	boolean success = false;
		
		
	switch (event.getEventIdentifier().intValue()) {<co id="example.order1.co4"/>
	case MgcpEvent.DTMF_0:
		dateAndTime = dateAndTime + "0";
		break;
	case MgcpEvent.DTMF_1:
		dateAndTime = dateAndTime + "1";
		break;
	case MgcpEvent.DTMF_2:
		dateAndTime = dateAndTime + "2";
		break;
	case MgcpEvent.DTMF_3:
		dateAndTime = dateAndTime + "3";
		break;
	case MgcpEvent.DTMF_4:
		dateAndTime = dateAndTime + "4";
		break;
	case MgcpEvent.DTMF_5:
		dateAndTime = dateAndTime + "5";
		break;
	case MgcpEvent.DTMF_6:
		dateAndTime = dateAndTime + "6";
		break;
	case MgcpEvent.DTMF_7:
		dateAndTime = dateAndTime + "7";
		break;
	case MgcpEvent.DTMF_8:
		dateAndTime = dateAndTime + "8";
		break;
	case MgcpEvent.DTMF_9:
		dateAndTime = dateAndTime + "10";
		break;

	default:
		logger.info("Received undefined DTMF digit().");

		break;
	}
	if (dateAndTime.length() == 10) {<co id="example.order1.co5"/>

		EntityManager mgr = null;
		Order order = null;
		char[] c = dateAndTime.toCharArray();

		StringBuffer stringBuffer = new StringBuffer();
		stringBuffer.append("You have selected delivery date to be ");

		String date = "" + c[0] + c[1];
		int iDate = (new Integer(date)).intValue();
		stringBuffer.append(iDate);

		String month = "" + c[2] + c[3];
		int iMonth = (new Integer(month)).intValue();

		String year = "" + c[4] + c[5];
		int iYear = (new Integer(year)).intValue();

		String hour = "" + c[6] + c[7];
		int iHour = (new Integer(hour)).intValue();

		String min = "" + c[8] + c[9];
		int iMin = (new Integer(min)).intValue();

		switch (iMonth) {
		case 1:
			month = "January";
			break;
		case 2:
			month = "February";
			break;
		case 3:
			month = "March";
			break;
		case 4:
			month = "April";
			break;
		case 5:
			month = "May";
			break;
		case 6:
			month = "June";
			break;
		case 7:
			month = "July";
			break;
		case 8:
			month = "August";
			break;
		case 9:
			month = "September";
			break;
		case 10:
			month = "October";
			break;
		case 11:
			month = "November";
			break;
		case 12:
			month = "December";
			break;
		default:
			break;
		}
		stringBuffer.append(" of ");
		stringBuffer.append(month);
		stringBuffer.append(" ");
		stringBuffer.append(2000 + iYear);
		stringBuffer.append(" at ");
		stringBuffer.append(iHour);
		stringBuffer.append(" hour and ");
		stringBuffer.append(iMin);
		stringBuffer.append(" minute. Thank you. Bye.");

		<co id="example.order1.co6"/>
		java.sql.Timestamp timeStamp = new java.sql.Timestamp(
				(iYear + 100), iMonth - 1, iDate, iHour, iMin, 0, 0);

		mgr = emf.createEntityManager();

		order = (Order) mgr
				.createQuery(
						"select o from Order o where o.orderId = :orderId")
				.setParameter("orderId", this.getCustomEvent().getOrderId())
				.getSingleResult();
		order.setDeliveryDate(timeStamp);

		mgr.flush();
		mgr.close();
			
		success = true;
		<co id="example.order1.co7"/>
		getChildSbbLocalObject().sendRQNT(stringBuffer.toString(), null, false);
	}else
	{
		setDateAndTime(dateAndTime);
	}
		
	if(success)
	{
		this.setSendBye(success);
	}
}
					</programlisting>
					<para><literal>onNotifyRequest</literal> is invoked to indicate that atleast one event(previously requested for detection) has been detected. Since this service ends order lifecycle in example, this handler performs following actions:</para>
					<calloutlist>
						<callout arearefs="example.order1.co1">
					       	<para>Tear down if announcemtn has completed</para>
		       			</callout>
		       			<callout arearefs="example.order1.co2">
					       	<para>Tear down if announcement failed</para>
		       			</callout>
		       			<callout arearefs="example.order1.co3">
					       	<para>Process <acronym>DTMF</acronym> </para>
		       			</callout>
		       			<callout arearefs="example.order1.co4">
					       	<para>Build string representation of date</para>
		       			</callout>
		       			<callout arearefs="example.order1.co5">
					       	<para>Build text to be played as announcement</para>
		       			</callout>
		       			<callout arearefs="example.order1.co6">
					       	<para>Update database</para>
		       			</callout>
		       			<callout arearefs="example.order1.co7">
					       	<para>Request announcement</para>
		       			</callout>
		       			
		       		</calloutlist>
				</listitem>
			</itemizedlist>
			
		</section>
</section>