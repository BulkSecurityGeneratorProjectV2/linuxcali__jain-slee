<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="jdbc_task">
	<title>JDBC Task overview</title>
	<para>
		As mentioned this example extends generic <acronym>JDBC</acronym> <acronym>RA</acronym> task to execute <acronym>SQL</acronym> queries. Implementation of example queries can be found in anonymous inner class of <classname>JdbcExampleSbb</classname> class.
		Below code snippet contains declaration of example <acronym>JDBC</acronym> task:
		
		
	</para>
	<programlisting role="JAVA" language="Java">
            SimpleJdbcTask task = new SimpleJdbcTask() {
            @Override
            public Object executeSimple(JdbcTaskContext context) {
                SleeTransaction tx = null;
                try {
                    tx = context.getSleeTransactionManager()
                            .beginSleeTransaction();
                    Connection connection = context.getConnection();
                    Statement statement = connection.createStatement();
                    tracer.info("Created statement to create table, executing query...");
                    statement
                            .execute("CREATE TABLE TestTable (Name VARCHAR(30));");
                    PreparedStatement preparedStatement = connection
                            .prepareStatement("INSERT INTO TestTable VALUES(?)");
                    preparedStatement.setString(1, "Mobicents");
                    tracer.info("Created prepared statement for data insert, executing...");
                    preparedStatement.execute();
                    preparedStatement = connection
                            .prepareStatement("SELECT ? From TestTable;");
                    preparedStatement.setString(1, "Name");
                    tracer.info("Created prepared statement for data query, executing...");
                    preparedStatement.execute();
                    ResultSet resultSet = preparedStatement.getResultSet();
                    resultSet.next();
                    tracer.info("Data query first result: "
                            + resultSet.getString(1));
                    Statement anotherStatement = connection.createStatement();
                    tracer.info("Created statement to drop table, executing update...");
                    anotherStatement.executeUpdate("DROP TABLE TestTable;");
                    tx.commit();
                    tx = null;
                    return true;
                } catch (Exception e) {
                    tracer.severe("failed to create table", e);
                    if (tx != null) {
                        try {
                            tx.rollback();
                        } catch (Exception f) {
                            tracer.severe("failed to rollback tx", f);
                        }
                    }
                    return false;
                }
            }
        };
     </programlisting>
     <important>
        <para>Note that task code is explicitly responsible for <acronym>JTA</acronym> management.</para>
     </important>
    <para>Above code execute <literal>java.sql</literal> queries on database. It operates on table in database which looks as follows:</para>
 
    <mediaobject>
        <imageobject>
            <imagedata width="300px" align="center"
                fileref="images/jdbc_db.jpeg" format="JPG" />
        </imageobject>
        <caption>
            <para>&THIS.EXAMPLE; Table
            </para>
        </caption>
    </mediaobject>
    
    <para>Execution of above queries can produce following results:</para>
 
        <variablelist>
          <varlistentry>
              <term>Success</term>
              <listitem>
                  <para>Database interaction has been successful and all queries have been executed without error. In this case, the <acronym>JDBC</acronym> <acronym>RA</acronym> fires 
                  <literal>SimpleJdbcTaskResultEvent</literal>. In this case <literal>SimpleJdbcTaskResultEvent.getResult()</literal> returns boolean value of <literal>True</literal>. </para>
              </listitem>
              
          </varlistentry>
          <varlistentry>
              <term>Failure</term>
              <listitem>
                  <para>Exception has been caught by task code. In this case <literal>SimpleJdbcTaskResultEvent.getResult()</literal> returns boolean value of <literal>False</literal>. </para>
              </listitem>
          </varlistentry>
          <varlistentry>
              <term>System failure</term>
              <listitem>
                  <para>Exception has been caught by <acronym>RA</acronym> before execution of queries. In this case <acronym>RA</acronym> will fire <literal>JdbcTaskExecutionThrowableEvent</literal> event. </para>
              </listitem>
          </varlistentry>
        </variablelist>

</section>	
