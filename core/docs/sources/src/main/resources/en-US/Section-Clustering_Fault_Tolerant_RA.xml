<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "User_Guide.ent">%BOOK_ENTITIES;]>

<section id="clustering_fault_tolerant_ra_api">
	
	<title>Fault Tolerant Resource Adaptor API</title>
	
	<para>Some may say that JAIN SLEE Resource Adaptors live outside the container, others that these live in the border, it requires the RA object to implement the <literal>javax.slee.resource.ResourceAdaptor</literal> interface, one with callbacks, which SLEE uses to interact with the RA, including one to provide the <literal>javax.slee.resource.ResourceAdaptorContext</literal> object, which in turn provides the facilities to interact with SLEE.</para>
	<para>The JAIN SLEE 1.1 RA API was a major milestone, standardizing this fundamental component of the platform, but unfortunately it is not enough, it misses an API for clustering, and that is critical for a RA working with a clustered JAIN SLEE, for instance where the RA can store data in the cluster? How does it know that another failed and does the apropriate failover work? The &THIS.PLATFORM; JAIN SLEE <application>Fault Tolerant RA API</application> extends the JAIN SLEE 1.1 RA API, providing the missing features related with clustering, and it does it in a very familiar way, anyone who develops a JAIN SLEE 1.1 RA easily uses our proprietary API.</para>
	
	<section id="fault_tolerant_resource_adaptor">
		<title>The Fault Tolerant Resource Adaptor Object</title>					
		
		<variablelist>
			<para>The core of the Faul Tolerant RA API is the <literal>org.mobicents.slee.resource.cluster.FaultTolerantResourceAdaptor</literal> interface, it is intended to be used instead of the <literal>javax.slee.resource.ResourceAdaptor</literal> interface from the JAIN SLEE 1.1 Specification, which it extends with three new methods:</para>
		    <varlistentry>
		        <term><literal>setFaultTolerantResourceAdaptorContext(
			FaultTolerantResourceAdaptorContext context)</literal></term>
		        <listitem>
		            <para>This method provides the RA with the <literal>org.mobicents.slee.resource.cluster.FaultTolerantResourceAdaptorContext</literal> object, which gives access to facilities related with the cluster. This method is invoked by SLEE right after invoking <literal>setResourceAdaptorContext(
			ResourceAdaptorContext context)</literal> from JAIN SLEE 1.1 specs, so the RA may store it in a field</para>
		        </listitem>
		    </varlistentry>
		    <varlistentry>
		        <term><literal>unsetFaultTolerantResourceAdaptorContext()</literal></term>
		        <listitem>
		            <para>This method indicates that the RA should remove any references it has to the FaultTolerantResourceAdaptorContext, it is not valid anymore. The method is invoked by SLEE before invoking <literal>unsetResourceAdaptorContext()</literal> from JAIN SLEE 1.1 specs</para>
		        </listitem>
		    </varlistentry>
		    <varlistentry>
		        <term><literal>failOver(K key)</literal></term>
		        <listitem>
		            <para>Callback from SLEE when the local RA was selected to recover the state for a replicated data key, which was owned by a cluster member that failed. The RA may then restore any runtime resources associated with such data.</para>
		        </listitem>
		    </varlistentry>
		</variablelist>
				
	</section>
	
	<section id="fault_tolerant_resource_adaptor_context">
		<title>The Fault Tolerant Resource Adaptor Context And Replicated Data Sources</title>					
		
		<variablelist>
			<para>The complement to <literal>javax.slee.resource.ResourceAdaptorContext</literal> of the JAIN SLEE 1.1 specification, providing all cluster related interfaces, to interact with the SLEE cluster, is the class named <literal>org.mobicents.slee.resource.cluster.FaultTolerantResourceAdaptorContext</literal>. It provides critical information such as if SLEE is running in local mode (not clustered), if it is the head/master member of the cluster or what are the members of the cluster.</para>
			<para>It also provides two data sources to replicate data in cluster:</para>
		    <varlistentry>
		        <term><literal>ReplicatedData</literal></term>
		        <listitem>
		            <para>A container for serializable data, which is replicated in the SLEE cluster, but don't require any failover.</para>
		        </listitem>
		    </varlistentry>
		    <varlistentry>
		        <term><literal>ReplicatedDataWithFailover</literal></term>
		        <listitem>
		            <para>A <literal>ReplicatedData</literal> which requires fail over callbacks, this means, that for all data stored here, when a cluster member goes down, the SLEE in another cluster member will invoke the <literal>failOver(Key k)</literal> callback in the Fault Tolerant RA object.</para>
		        </listitem>
		    </varlistentry>		   
		</variablelist>
				
	</section>
	
	<para>For further information refer to the Fault Tolerant RA API Javadocs.</para>
	
</section>
	