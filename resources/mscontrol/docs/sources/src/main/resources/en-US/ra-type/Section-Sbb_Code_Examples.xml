<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">%BOOK_ENTITIES;]>

<section
	id="ratype_sbb_code_examples">

	<title>Sbb Code Examples</title>
	<para>The following code examples shows how to use the Resource Adaptor Type for common functionalities</para>

	<section
		id="ratype_sbb_code_examples_create_connection">

		<title>Connection Creation &amp; Process SIP Invite</title>

		<para>
			The following code example shows how to process
			<literal>SIP</literal>
			<literal>INVITE</literal>
			and attach to
			<literal>JSR309</literal>
			connection.
		</para>
		<para>
			The
			<literal>sipProvider</literal>, 
			object is the SIP RA SBB Interface, while the object
			<literal>sipAciFactory</literal>
			is the SIP RA Activity Context Interface Factory, both obtained through the SBB JNDI environment.
			Simlarly, the
			<literal>mscFactory</literal>, 
			object is the JSR309 RA SBB Interface, while the object
			<literal>mscAcifFactory</literal>
			is the SIP RA Activity Context Interface Factory 
		</para>
		<programlisting
			language="Java"
			role="JAVA">
			<![CDATA[
public void onInvite(RequestEvent event, ActivityContextInterface aci) {
        logger.info("Receive call ");
        this.event = event;
        request = event.getRequest();

        //sending provisional response to the UA which indiactes that initial request 
        //successfuly reach call controller and is going to be handled
        try {
            Response response = messageFactory.createResponse(Response.TRYING, request);
            event.getServerTransaction().sendResponse(response);
        } catch (Exception e) {
            //Can not send provisional response? Forget about this request.
            return;
        }

        //Provisional response sent so possible to obtain SIP Dialog activity and attach this
        //SBB to the Dialog activity. Dialog activity can be used to maintain current state too.
        ActivityContextInterface callActivity = null;
        try {
            Dialog dialog = sipProvider.getNewDialog(event.getServerTransaction());
            dialog.terminateOnBye(true);
            callActivity = sipAciFactory.getActivityContextInterface((DialogActivity) dialog);
            callActivity.attach(sbbContext.getSbbLocalObject());
        } catch (Exception e) {
            //oops, this is unexpected core problem. there is only one way - terminate call
            tracer.severe("Unexpected error", e);
            reject(request);
            return;
        }
		MediaSession session = null;
        try {
            session = mscFactory.createMediaSession();
        } catch (MsControlException e) {
            tracer.severe("Unexpected error", e);
            reject(request);
            return;
        }
	 	NetworkConnection connection = null;
        logger.info("Created media session: " + session);
        try {
            connection = session.createNetworkConnection(NetworkConnection.BASIC);
        } catch (MsControlException e) {
            tracer.severe("Unexpected error", e);
            reject(request);
            return;
        }

        logger.info("Created network connection: " + connection);
        //creating media connection activity context interface
        ActivityContextInterface activityContextInterface = null;
        try {
            activityContextInterface = mscAcifFactory.getActivityContextInterface(connection);
            activityContextInterface.attach(sbbContext.getSbbLocalObject());
        } catch (Exception e) {
            tracer.severe("Unexpected error", e);
            reject(request);
            return;
        }

        SdpPortManager sdpManager = null;
        try {
            sdpManager = connection.getSdpPortManager();
        } catch (MsControlException e) {
        }

        logger.info("SDP Manager: " + sdpManager);
        try {
            sdpManager.processSdpOffer((byte[]) request.getContent());
            logger.info("SDP Manager: sent process offer request");
        } catch (SdpPortManagerException e) {
        }
    }]]>
		</programlisting>
	</section>

	<section
		id="ratype_sbb_code_examples_send_message">

		<title>Sending answer</title>

		<para>
			The following code example shows how to handle answer generated by
			<literal>JSR309</literal>
			on successful processing of
			<literal>SDP</literal>
			from example above:
		</para>

		<programlisting
			language="Java"
			role="JAVA">
			<![CDATA[
    public void onAnswerGenerated(SdpPortManagerEvent evt, ActivityContextInterface aci) {
        logger.info("Receive answer generated event:");
        byte[] sdp = evt.getMediaServerSdp();
        System.out.println("Request=" + request + ", sdp=" + new String(sdp));
        ContentTypeHeader contentType = null;
        try {
            contentType = headerFactory.createContentTypeHeader("application", "sdp");
        } catch (ParseException ex) {
        }

        String localAddress = sipProvider.getListeningPoints()[0].getIPAddress();
        int localPort = sipProvider.getListeningPoints()[0].getPort();

        Address contactAddress = null;
        try {
            contactAddress = addressFactory.createAddress("sip:" + localAddress + ":" + localPort);
        } catch (ParseException ex) {
        }
        ContactHeader contact = headerFactory.createContactHeader(contactAddress);

        try {
            Response ok = messageFactory.createResponse(Response.OK, request, contentType, sdp);
            ok.setHeader(contact);
            event.getServerTransaction().sendResponse(ok);
        //provider.sendResponse(ok);
        } catch (Exception e) {
            tracer.info("Can not send SIP response: ", e);
        }
        
        joinInitiate();
    }

    private void joinInitiate() {
        try {
            MediaGroup ivr = session.createMediaGroup(MediaGroup.
            	PLAYER_RECORDER_SIGNALDETECTOR);
            connection.joinInitiate(Direction.DUPLEX, ivr, "context");
        } catch (Exception e) {
            tracer.severe("Unable to initiate join: ", e);
        }
    }]]>
		</programlisting>
	</section>

</section>