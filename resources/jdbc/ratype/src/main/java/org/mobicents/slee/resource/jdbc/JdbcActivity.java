/*
 * JBoss, Home of Professional Open Source
 * Copyright 2011, Red Hat, Inc. and individual contributors
 * by the @authors tag. See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.mobicents.slee.resource.jdbc;

import java.sql.PreparedStatement;
import java.sql.Statement;

/**
 * Interface for a JDBC Resource Adaptor Activity Object. It executes statements
 * asynchronously.
 * 
 * @author martins
 * 
 */
public interface JdbcActivity {

	/**
	 * Asynchronous execution of statement with unknown result type, which is
	 * provided in an event, fired in the activity. See
	 * {@link Statement#execute(String)} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param statement
	 * @param sql
	 */
	void execute(Statement statement, String sql);

	/**
	 * Asynchronous execution of statement with unknown result type, which is
	 * provided in an event, fired in the activity. See
	 * {@link Statement#execute(String,int)} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param statement
	 * @param sql
	 * @param autoGeneratedKeys
	 */
	void execute(Statement statement, String sql, int autoGeneratedKeys);

	/**
	 * Asynchronous execution of statement with unknown result type, which is
	 * provided in an event, fired in the activity. See
	 * {@link Statement#execute(String,int[])} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param statement
	 * @param sql
	 * @param columnIndexes
	 */
	void execute(Statement statement, String sql, int columnIndexes[]);

	/**
	 * Asynchronous execution of statement with unknown result type, which is
	 * provided in an event, fired in the activity. See
	 * {@link Statement#execute(String,String[])} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param statement
	 * @param sql
	 * @param columnNames
	 */
	void execute(Statement statement, String sql, String columnNames[]);

	/**
	 * Asynchronous execution of statement with "result set" result type, which
	 * is provided in an event, fired in the activity. See
	 * {@link Statement#executeQuery(String)} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param statement
	 * @param sql
	 */
	void executeQuery(Statement statement, String sql);

	/**
	 * Asynchronous execution of statement with "update count" result type,
	 * which is provided in an event, fired in the activity. See
	 * {@link Statement#executeQuery(String)} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param statement
	 * @param sql
	 */
	void executeUpdate(Statement statement, String sql);

	/**
	 * Asynchronous execution of statement with "update count" result type,
	 * which is provided in an event, fired in the activity. See
	 * {@link Statement#executeQuery(String,int)} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param statement
	 * @param sql
	 * @param autoGeneratedKeys
	 */
	void executeUpdate(Statement statement, String sql, int autoGeneratedKeys);

	/**
	 * Asynchronous execution of statement with "update count" result type,
	 * which is provided in an event, fired in the activity. See
	 * {@link Statement#execute(String,int[])} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param statement
	 * @param sql
	 * @param columnIndexes
	 */
	void executeUpdate(Statement statement, String sql, int columnIndexes[]);

	/**
	 * Asynchronous execution of statement with "update count" result type,
	 * which is provided in an event, fired in the activity. See
	 * {@link Statement#execute(String,String[])} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param statement
	 * @param sql
	 * @param columnNames
	 */
	void executeUpdate(Statement statement, String sql, String columnNames[]);

	/**
	 * Asynchronous execution of prepared statement with unknown result type,
	 * which is provided in an event, fired in the activity. See
	 * {@link PreparedStatement#execute()} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param preparedStatement
	 *            the prepared statement
	 */
	void execute(PreparedStatement preparedStatement);

	/**
	 * Asynchronous execution of prepared statement with "result set" result
	 * type, which is provided in an event, fired in the activity. See
	 * {@link PreparedStatement#executeQuery()} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param preparedStatement
	 *            the prepared statement
	 */
	void executeQuery(PreparedStatement preparedStatement);

	/**
	 * Asynchronous execution of prepared statement without "update count"
	 * result type, which is provided in an event, fired in the activity. See
	 * {@link PreparedStatement#executeUpdate()} for more info.
	 * <p>
	 * If the execution throws an exception, it will be provided as an event
	 * too.
	 * 
	 * @param preparedStatement
	 *            the prepared statement
	 */
	void executeUpdate(PreparedStatement preparedStatement);

	/**
	 * Requests the activity end.
	 */
	public void endActivity();

}
