<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="ratype_sbb_code_examples">

	<title>Sbb Code Examples</title>

	<para>The following code examples shows how to use the Resource Adaptor Type for common functionalities</para>
	
	<section id="ratype_sbb_code_examples_retrieving_the_ra_interface_and_factory">

		<title>Retrieving the RA Interface and ACI Factory</title>

		<para>The following code examples the retrieval of the RA's SBB Interface and ACI Factory, usually done in the Sbb's <literal>setSbbContext(SbbContext)</literal>:</para>
		
		<programlisting language="Java" role="JAVA">
			<![CDATA[
		/**
	 * the SBB object context
	 */
	private SbbContextExt contextExt;

	/**
	 * the JDBC RA SBB Interface
	 */
	private JdbcResourceAdaptorSbbInterface jdbcRA;

	/**
	 * the JDBC RA {@link ActivityContextInterface} factory
	 */
	private JdbcActivityContextInterfaceFactory jdbcACIF;

	@Override
	public void setSbbContext(SbbContext context) {
		this.contextExt = (SbbContextExt) context;
		this.jdbcRA = (JdbcResourceAdaptorSbbInterface) contextExt
				.getResourceAdaptorInterface(
						JdbcResourceAdaptorSbbInterface.RATYPE_ID, raEntityLinkName);
		this.jdbcACIF = (JdbcActivityContextInterfaceFactory) contextExt
				.getActivityContextInterfaceFactory(JdbcActivityContextInterfaceFactory.RATYPE_ID);
	}]]>
		</programlisting>
		
		<para>The <literal>raEntityLinkName</literal> is the link name of the RA entity to use. The link to the default RA entity, use the link name <literal>JDBCRA</literal>..</para>
		
	</section>

	<section id="ratype_sbb_code_examples_create_and_attach_to_activity">

		<title>Create and Attach to RA Activities</title>

		<para>The following code examples the creation of <literal>JdbcActivity</literal>, and the attachment to its <literal>ActivityContextInterface</literal>:</para>
		
		<programlisting language="Java" role="JAVA">
			<![CDATA[
		// create activity using the RA sbb interface
		JdbcActivity jdbcActivity = jdbcRA.createActivity();
		// get its aci from the RA ACI factory
		ActivityContextInterface jdbcACI = jdbcACIF
				.getActivityContextInterface(jdbcActivity);
		// attach the sbb entity
		jdbcACI.attach(contextExt.getSbbLocalObject());]]>
		</programlisting>
		
	</section>
	
	<section id="ratype_sbb_code_examples_execute_a_statement">

		<title>Execute a Statement</title>

		<para>The following code examples the creation of a <literal>Statement</literal> and the execution of SQL on a <literal>JdbcActivity</literal>:</para>
		
		<programlisting language="Java" role="JAVA">
			<![CDATA[
		// get connection and create statement
		Statement statement = jdbcRA.getConnection().createStatement();
		// execute SQL in the jdbc activity 
		jdbcActivity.executeQuery(statement,
				"CREATE TABLE TestTable (Name VARCHAR(30));");]]>
		</programlisting>
		
	</section>
	
	<section id="ratype_sbb_code_examples_handle_event_and_end_activity">

		<title>Handling Events and Ending an Activity </title>

		<para>The following code examples the handling of events, for both <literal>PreparedStatement</literal> and <literal>Statement</literal> execution, following the service logic execution. It also shows the explicit ending of the activity:</para>
		
		<programlisting language="Java" role="JAVA">
			<![CDATA[	
	/**
	 * Event handler for {@link StatementResultSetEvent}.
	 * 
	 * @param event
	 * @param aci
	 */
	public void onStatementResultSetEvent(StatementResultSetEvent event,
			ActivityContextInterface aci) {
		tracer.info("Received a StatementResultSetEvent, as result of executed SQL "
				+ event.getSQL());
		tracer.info("Result: " + event.getResultSet());
		try {
			PreparedStatement preparedStatement = jdbcRA.getConnection()
					.prepareStatement("INSERT INTO TestTable VALUES(?)");
			preparedStatement.setString(1, "Mobicents");
			tracer.info("Created prepared statement, executing...");
			((JdbcActivity) aci.getActivity()).executeUpdate(preparedStatement);
		} catch (Throwable e) {
			tracer.severe("failed to create statement", e);
		}
	}

	/**
	 * Event handler for {@link PreparedStatementUpdateCountEvent}.
	 * 
	 * @param event
	 * @param aci
	 */
	public void onPreparedStatementUpdateCountEvent(
			PreparedStatementUpdateCountEvent event,
			ActivityContextInterface aci) {
		tracer.info("Received a PreparedStatementUpdateCountEvent.");
		tracer.info("Update Count: " + event.getUpdateCount());
		try {
			Statement anotherStatement = jdbcRA.getConnection()
					.createStatement();
			tracer.info("Created statement, executing query...");
			((JdbcActivity) aci.getActivity()).executeUpdate(anotherStatement,
					"DROP TABLE TestTable;");
		} catch (Throwable e) {
			tracer.severe("failed to create statement", e);
		}
	}
	
	/**
	 * Event handler for {@link StatementUpdateCountEvent}.
	 * 
	 * @param event
	 * @param aci
	 */
	public void onStatementUpdateCountEvent(StatementUpdateCountEvent event,
			ActivityContextInterface aci) {
		tracer.info("Received a StatementUpdateCountEvent, as result of executed SQL "
				+ event.getSQL());
		tracer.info("Update Count: " + event.getUpdateCount());
		tracer.info("Ending JDBC Activity...");
		((JdbcActivity) aci.getActivity()).endActivity();
	}]]>
		</programlisting>
		
		<para>The SBB XML descriptor code to declare the handling of such events:</para>
		
		<programlisting language="XML" role="XML"><![CDATA[
		<event event-direction="Receive" initial-event="False">
			<event-name>StatementResultSetEvent</event-name>
			<event-type-ref>
				<event-type-name>StatementResultSetEvent</event-type-name>
				<event-type-vendor>org.mobicents</event-type-vendor>
				<event-type-version>1.0</event-type-version>
			</event-type-ref>
		</event>

		<event event-direction="Receive" initial-event="False">
			<event-name>PreparedStatementUpdateCountEvent</event-name>
			<event-type-ref>
				<event-type-name>PreparedStatementUpdateCountEvent</event-type-name>
				<event-type-vendor>org.mobicents</event-type-vendor>
				<event-type-version>1.0</event-type-version>
			</event-type-ref>
		</event>
		
		<event event-direction="Receive" initial-event="False">
			<event-name>StatementUpdateCountEvent</event-name>
			<event-type-ref>
				<event-type-name>StatementUpdateCountEvent</event-type-name>
				<event-type-vendor>org.mobicents</event-type-vendor>
				<event-type-version>1.0</event-type-version>
			</event-type-ref>
		</event>]]>
	</programlisting>
	
	</section>
		
</section>