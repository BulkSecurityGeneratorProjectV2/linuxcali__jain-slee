<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="ratype_activities">

	<title>Activities</title>

	<para>The single activity object for &THIS.RA; Resource Adaptor is the <literal>org.mobicents.slee.resource.jdbc.JdbcActivity</literal> interface. Through the activity an SBB can execute multiple JDBC statements, and receive the related responses asynchronously through events on it. Due to the nature of SLEE activities, this RA activity acts like a queue of requests, allowing the processing of their responses - the events- in a serialized way</para>
	
	<para>An activity starts on demand by an SBB, through the RA SBB Interface, and it ends when an SBB invokes its <literal>endActivity()</literal> method.</para>
	
	<para>The activity interface is defined as follows:</para>
	
	<programlisting language="Java" role="JAVA">
		<![CDATA[
package org.mobicents.slee.resource.jdbc;

import java.sql.PreparedStatement;
import java.sql.Statement;

public interface JdbcActivity {

	void execute(Statement statement, String sql);

	void execute(Statement statement, String sql, int autoGeneratedKeys);

	void execute(Statement statement, String sql, int columnIndexes[]);

	void execute(Statement statement, String sql, String columnNames[]);

	void executeQuery(Statement statement, String sql);

	void executeUpdate(Statement statement, String sql);

	void executeUpdate(Statement statement, String sql, int autoGeneratedKeys);

	void executeUpdate(Statement statement, String sql, int columnIndexes[]);

	void executeUpdate(Statement statement, String sql, String columnNames[]);

	void execute(PreparedStatement preparedStatement);

	void executeQuery(PreparedStatement preparedStatement);

	void executeUpdate(PreparedStatement preparedStatement);

	public void endActivity();

}]]>
     </programlisting>
     
     <variablelist>
     
     <varlistentry>
		<term>The <literal>execute(Statement, String)</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of statement with unknown result type, which is provided in an event, fired in the activity. Details about parameters can be seen in the javadoc for <literal>java.sql.Statement</literal> method with same signature. This method should only be used when the application has no idea of what is the SQL to be executed. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>
	
	<varlistentry>
		<term>The <literal>execute(Statement, String, int)</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of statement with unknown result type, which is provided in an event, fired in the activity. Details about parameters can be seen in the javadoc for <literal>java.sql.Statement</literal> method with same signature. This method should only be used when the application has no idea of what is the SQL to be executed. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>
	
	<varlistentry>
		<term>The <literal>execute(Statement, String, int[])</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of statement with unknown result type, which is provided in an event, fired in the activity. Details about parameters can be seen in the javadoc for <literal>java.sql.Statement</literal> method with same signature. This method should only be used when the application has no idea of what is the SQL to be executed. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>
	
	<varlistentry>
		<term>The <literal>execute(Statement, String, String[])</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of statement with unknown result type, which is provided in an event, fired in the activity. Details about parameters can be seen in the javadoc for <literal>java.sql.Statement</literal> method with same signature. This method should only be used when the application has no idea of what is the SQL to be executed. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>
	
	<varlistentry>
		<term>The <literal>executeQuery(Statement, String)</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of statement with <literal>result set</literal> result type, which is provided in an event, fired in the activity. Details about parameters can be seen in the javadoc for <literal>java.sql.Statement</literal> method with same signature. This method should be used when the application knows that the SQL to execute is a read query. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>
	
	<varlistentry>
		<term>The <literal>executeUpdate(Statement, String)</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of statement with <literal>update count</literal> result type, which is provided in an event, fired in the activity. Details about parameters can be seen in the javadoc for <literal>java.sql.Statement</literal> method with same signature. This method should be used when the application knows that the SQL to execute is a write query. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>
	
	<varlistentry>
		<term>The <literal>executeUpdate(Statement, String, int)</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of statement with <literal>update count</literal> result type, which is provided in an event, fired in the activity. Details about parameters can be seen in the javadoc for <literal>java.sql.Statement</literal> method with same signature. This method should be used when the application knows that the SQL to execute is a write query. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>
	
	<varlistentry>
		<term>The <literal>executeUpdate(Statement, String, int[])</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of statement with <literal>update count</literal> result type, which is provided in an event, fired in the activity. Details about parameters can be seen in the javadoc for <literal>java.sql.Statement</literal> method with same signature. This method should be used when the application knows that the SQL to execute is a write query. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>
	
	<varlistentry>
		<term>The <literal>executeUpdate(Statement, String, String[])</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of statement with <literal>update count</literal> result type, which is provided in an event, fired in the activity. Details about parameters can be seen in the javadoc for <literal>java.sql.Statement</literal> method with same signature. This method should be used when the application knows that the SQL to execute is a write query. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>

	<varlistentry>
		<term>The <literal>execute(PreparedStatement)</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of a prepared statement with <literal>unknown</literal> result type, which is provided in an event, fired in the activity. PreparedStatements are an effective way to improve performance, since the JDBC driver may cache and pool the SQL. Details about parameters can be seen in the javadoc for <literal>java.sql.PreparedStatement</literal> method with same signature. This method should only be used when the application has no idea of what is the SQL to be executed. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>
	
	<varlistentry>
		<term>The <literal>executeQuery(PreparedStatement)</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of a prepared statement with <literal>result set</literal> result type, which is provided in an event, fired in the activity. PreparedStatements are an effective way to improve performance, since the JDBC driver may cache and pool the SQL. This method should be used when the application knows that the SQL to execute is a read query. Details about parameters can be seen in the javadoc for <literal>java.sql.PreparedStatement</literal> method with same signature. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>
	
	<varlistentry>
		<term>The <literal>executeUpdate(PreparedStatement)</literal> method:</term>
		<listitem>
			<para>Asynchronous execution of a prepared statement with <literal>update count</literal> result type, which is provided in an event, fired in the activity. PreparedStatements are an effective way to improve performance, since the JDBC driver may cache and pool the SQL. This method should be used when the application knows that the SQL to execute is a write query. If the execution throws an exception, it will be provided as an event too.</para>
		</listitem>
	</varlistentry>	
	
	<varlistentry>
		<term>The <literal>endActivity()</literal> method:</term>
		<listitem>
			<para>Ends the activity and its related Activity Context.</para>
		</listitem>
	</varlistentry>
	</variablelist>	
	
</section>