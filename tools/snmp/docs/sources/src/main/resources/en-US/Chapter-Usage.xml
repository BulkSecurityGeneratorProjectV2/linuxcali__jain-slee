<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "User_Guide.ent">%BOOK_ENTITIES;]>

<chapter
	id="configuration_and_running">

	<title>Configurating and Using &THIS.PLATFORM; SNMP Adaptor</title>
	
	<section id="configuration">
		<title>Configuring &THIS.PLATFORM; SNMP Adaptor</title>
		<para>The SNMP Adaptor is configured with five files.</para>
		<variablelist>
			<varlistentry>
				<term>jboss-service.xml</term>
				<listitem>
					<para>defines adaptor beans and their configuration.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>managers.xml</term>
				<listitem>
					<para>defines managers which are notified (by trap or info requests) by this adaptor.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>users.xml</term>
				<listitem>
					<para>defines credentials used in communication with managers.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>notifications.xml</term>
				<listitem>
					<para>defines how <acronym>JMX</acronym> notification is converted into <acronym>SNMP</acronym> Trap of SNMP Info. It is used to generate MIB file.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>attributes.xml</term>
				<listitem>
					<para>defines attributes which can be managed with SNMP. It is used to generate MIB file.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>*.mib</term>
				<listitem>
					<para> <literal>mib</literal> files are generated based on <filename>attributes.xml</filename> and <filename>notifications.xml</filename>.  In short it contains mapping between OID(Object Identifier) and its type defined in mentioned files.</para>
				</listitem>
			</varlistentry>
			
		</variablelist>			
		<section id="configuration_and_running_mib">
			<title>Management Information Base(MIB)</title>
			<para><literal>SNMP</literal> identifies network devices by their <literal>OID</literal>. More detailed information about <literal>OID</literal> can be found <ulink url="http://standards.ieee.org/develop/regauth/tut/oid.pdf">here</ulink>.</para>
			<para>&THIS.PLATFORM; SNMP Adaptor configuration file follow OID scheme outlined below:</para>
			<itemizedlist>
				<listitem>
					<para>.1.3.6.1.4.1.2312.101 - OID indicating &THIS.PLATFORM;</para>
				</listitem>
				<listitem>
					<para>.1.3.6.1.4.1.2312.101.1 - OID for server one(identifies specific server in network)</para>
				</listitem>
				<listitem>
					<para>.1.3.6.1.4.1.2312.101.1.100 - OID root for SLEE management(maps SLEE JMX beans)</para>
				</listitem>
				<listitem>
					<para>.1.3.6.1.4.1.2312.101.1.200 - OID root for &THIS.PLATFORM; specific management(maps &THIS.PLATFORM; specific JMX beans)</para>
				</listitem>
				<listitem>
					<para>.1.3.6.1.4.1.2312.101.1.300 - OID root for application specific management(SLEE JMX beans which expose management for services)</para>
				</listitem>
			</itemizedlist>
			<para>Following above, <literal>SleeManagement</literal> bean and related data can be accessed with following:</para>
			<itemizedlist>
				<listitem>
					<para>.1.3.6.1.4.1.2312.101.1.100.1 - OID of SleeManagement bean</para>
				</listitem>
				<listitem>
					<para>.1.3.6.1.4.1.2312.101.1.100.1.[1-100] - OIDs set of bean attributes</para>
				</listitem>
				<listitem>
					<para>.1.3.6.1.4.1.2312.101.1.100.1.[101+] - OIDs set of notification attributes generated by SleeManagement bean</para>
				</listitem>
				
			</itemizedlist>
			<para> <literal>MIB</literal> file is generated based on present <filename>notifications.xml</filename> and <filename>attributes.xml</filename> files upon binary assembly.
			Any change to those files, requires <literal>MIB</literal> file to be recreated. This file can be generated with use of:
			</para>
			<variablelist>
				<varlistentry>
					<term>CLI tool</term>
					<listitem>
						<para>is a simple jar which can be used to generate <literal>MIB</literal> file. It is available for download from <ulink url="https://repository.jboss.org/nexus/index.html#nexus-search;quick~mib">nexus</ulink>.
						Note, that artifact that is to be used has classifier <literal>executable</literal>. Maven dependency for it, looks as follows:
						 </para>
						 <programlisting language="XML" role="XML"><![CDATA[
<dependency>
  <groupId>org.jboss</groupId>
  <artifactId>mibgen-generator</artifactId>
  <version>1.0</version>
  <classifier>executable</classifier>
</dependency>
		]]>
						</programlisting>
						<para>Below is command like invocation of said jar:</para>
						<programlisting>
java -jar mibgen-generator-1.0-executable.jar -a attributes.xml -n notifications.xml -m MIB-ENTRY_NAME -o ~/.snmp/mibs/TEST.mib
						</programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>maven plugin</term>
					<listitem>
						<para>there is available maven plugin which is capable of generating <literal>MIB</literal> file. Following code snippet shows how to use it:</para>
						<programlisting language="XML" role="XML"><![CDATA[
<build>
...
   <plugins>
      <plugin>
         <groupId>org.jboss</groupId>
         <artifactId>mibgen-maven-plugin</artifactId>
         <version>1.0-SNAPSHOT</version>
          <configuration>
           <attributesFile>src/main/resources/attributes.xml</attributesFile>
           <notificationsFile>src/main/resources/notifications.xml</notificationsFile>
           <moduleName>TEST-MIB</moduleName>
           <outputFile>${_env.HOME_}/.snmp/mibs/JBOSS-AS-VARIA.mib</outputFile>
          </configuration>
         <executions>
          <execution>
           <phase>compile</phase>
            <goals>
             <goal>generate-mib</goal>
            </goals>
           </execution>
         </executions>
        </plugin>
   </plugins>
...
</build>
		]]>
						</programlisting>
						<note> <para> The '_' are present to avoid variable beeing resolved on *NIX systems, it should be removed if copy&amp;paste programming methodology is used.</para></note>						
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
			
			<acronym>MIB</acronym> file should be made available to <acronym>SNMP</acronym> management tool, to allow it to understand exchanged data. Please refer to tool documentation for guidelines.</para>
			<note>
				<para>This scheme is not mandatory, it can be changed to fit specific deployment. Its present by default to allow quick start with adaptor.</para>
			</note>
		</section>
		<section id="configuration_and_running_beans">
			<title>Adaptor Service</title>
			<para>SNMP Adaptor is a simple JBoss service. The <filename>jboss-services.xml</filename> manages this service. It defines following beans:</para>
			<variablelist>
				<varlistentry>
					<term>jboss.jmx:name=SnmpAgent,service=trapd,type=logger</term>
					<listitem>
						<para>Simple manager bean. It consumes SNMP commands. It has following, configurable, attributes:</para>
						<itemizedlist>
							<listitem>
								<para>BindAddress - address to which this agent will bind.</para>
							</listitem>
							<listitem>
								<para>Port - port to which this agent will bind.</para>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>org.jboss.jmx.adaptor.snmp.system.MIB2SystemGroupService</term>
					<listitem>
						<para>Bean which manages system information according to RFC 1213 
       iso.org.dod.internet.mgmt.mib-2.system.*</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>jboss.jmx:name=SnmpAgent,service=trapd,type=logger</term>
					<listitem>
						<para>Is the heart of adaptor. Based on passed configuration, it allocates worker resources and manages notification subscription.
						It is configured by following mbean attributes:</para>
						<itemizedlist>
							<listitem>
								<para>RequestHandlerClassName - name of class implementing <filename>org.jboss.jmx.adaptor.snmp.agent.RequestHandler</filename> interface. This class is responsible for mapping
								incoming requests to specific <literal>MBean</literal> attributes accessors. </para>
							</listitem>
							<listitem>
								<para>RequestHandlerResName - <acronym>URI</acronym> of <acronym>XML</acronym> configuration file. It is used to build association between <literal>MBean</literal> attributes and <literal>SNMP</literal> managed attributes.
								In default deploymen it is called <filename>attributes.xml</filename>. </para>
							</listitem>
							<listitem>
								<para>TrapFactoryClassName - name of class implementing <filename>org.jboss.jmx.adaptor.snmp.agent.TrapFactory</filename> interface. This class is responsible for
								conversion of <acronym>JMX</acronym> notification payload into <acronym>SNMP</acronym> trap or info.</para>
							</listitem>
							<listitem>
								<para>NotificationMapResName - <acronym>URI</acronym> of <acronym>XML</acronym> configuration file. It is used to build association between <literal>JMX</literal> Notification attributes and <literal>SNMP</literal> trap or info message.
								In default deploymen it is called <filename>notifications.xml</filename>. </para>
							</listitem>
							<listitem>
								<para>ManagersResName - <acronym>URI</acronym> of <acronym>XML</acronym> configuration file. It is used to build base of remote managers this agent should notify.
								In default deploymen it is called <filename>managers.xml</filename>. </para>
							</listitem>
							<listitem>
								<para>UsersResName - <acronym>URI</acronym> of <acronym>XML</acronym> configuration file. It is used to build base of users and their credentials.
								In default deploymen it is called <filename>users.xml</filename>. </para>
							</listitem>
							<listitem>
								<para>HeartBeatPeriod - integer value. It indicates value (in seconds!) between agent sending <acronym>SNMP</acronym> heart beat to managers.</para>
							</listitem>
							<listitem>
								<para>BindAddress - address to which this agent will bind.</para>
							</listitem>
							<listitem>
								<para>Port - port to which this agent will bind.</para>
							</listitem>
							<listitem>
								<para>DynamicSubscriptions - boolean value which controls agent ability to handle dynamic subscription to <acronym>JMX</acronym> Notifications. Depending on value: </para>
								<variablelist>
									<varlistentry>
										<term>true</term>
										<listitem>
											<para>upon start, adapter will process subscription list and try to subscribe to each listed <literal>MBean</literal>. It will also process
											<literal>MBeanServer</literal> notification of newly deployed <literal>MBeans</literal>. If new <literal>MBean</literal> matches one from list, adapter will subscribe to 
											notifiacations this <literal>MBean</literal> emits. 
											</para>
										</listitem>
									</varlistentry>
									<varlistentry>
										<term>false</term>
										<listitem>
											<para> adapter will process subscription list ONLY on start, it will ignore <literal>MBeanServer</literal> notification of newly deployed <literal>MBeans</literal>. </para>
										</listitem>
									</varlistentry>
								</variablelist>
							</listitem>
							<listitem>
								<para>SubscriptionList - contains <acronym>XML</acronym> description of subscriptions. This attribute instructs adapter to which <acronym>MBeans</acronym> and types of notifications it should subscribe to.
								In short, this attribute element, contains single <literal>subscription-list</literal> child element. The <literal>subscription-list</literal> supports
								single type of children: <literal>mbean</literal>. The <literal>mbean</literal> element, has single attribute called <literal>name</literal>. It contains JMX expression which is used to match
								actual mbean name. Example entry may look as follows:
								</para>
								<programlisting language="XML" role="XML"><![CDATA[
<subscription-list>
  <!-- Monitor events from SNMP adaptor itself -->
  <mbean name="jboss.jmx:name=SnmpAgent,service=snmp,type=adaptor">
      <notification type="jboss.snmp.agent.coldstart"/>
  </mbean>
  <!-- Monitor timer for heartbeat events -->
  <mbean name="jboss.jmx:name=SnmpAgent,service=timer,type=heartbeat">
      <notification type="jboss.snmp.agent.heartbeat"/>
  </mbean>
        
  <!-- NOTE: notification.type is used for NotificationFilter, matched as notification.getType().startsWith(${type}) -->
  <!-- SLEE mgmt:alarms -->
  <mbean name="javax.slee.management:name=Alarm">
   	<notification type="javax.slee.management.alarm"/>
  </mbean>
  <!-- SLEE mgmt:state change -->
  <mbean name="javax.slee.management:name=SleeManagement">
  	<notification type="javax.slee.management.sleestatechange"/>
  </mbean>                
</subscription-list>
								
								]]>
						</programlisting>
								<note>
									<para>For detailed description of this attribute please reffer to <ulink url="http://www.jboss.org/j2ee/dtd/jboss-subscription.dtd">this</ulink> file.</para>
								</note>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		<section id="configuration_and_running_managers">
			<title>Managers</title>
			<para>This file(<filename>managers.xml</filename>) controls managers instances to which adaptor(agent) connects to. Root element of this file is <literal>manager-list</literal>. It contains list of 
			<literal>manager</literal> XML nodes. Each defines single manager. <literal>manager</literal> entry has following children: </para>
			<variablelist>
				<varlistentry>
					<term>address</term>
					<listitem>
						<para>its value indicates manager's address (IP address or host name).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>port</term>
					<listitem>
						<para>its value defines manager's listening port.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>local-address</term>
					<listitem>
						<para>its value defines local address to which adaptor will bind. This entry is optional.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>local-port</term>
					<listitem>
						<para>its value indicates local port to which adaptor will bind. This entry is optional.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>version</term>
					<listitem>
						<para>its value indicates SNMP version to be used. Allowed values are 1,2 and 3</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>community-string</term>
					<listitem>
						<para>for versions 1 and 2 its value is used as community string (public or private)</para>
					</listitem>
				</varlistentry>				
			</variablelist>
			<para>Example content may look like:</para>
			<programlisting language="XML" role="XML"><![CDATA[
<manager-list>
  <!--
    A default test manager to forward traps. It is controlled by the
    "jboss.jmx:name=SnmpAgent,service=trapd,type=logger" MBean that
    simply outputs received traps as log4j DEBUG messages
  -->
  <!-- v1 manager -->
  <manager>
    <address>localhost</address>
    <port>162</port>
    <local-address></local-address>
    <local-port></local-port>
    <version>1</version>
    <community-string>public</community-string>
  </manager>
  <!-- v2c manager -->
  <manager>
    <address>localhost</address>
    <port>162</port>
    <local-address></local-address>
    <local-port></local-port>
    <version>2</version>
    <community-string>public</community-string>
  </manager>
  <!-- v3 manager -->
  <manager>
    <address>localhost</address>
    <port>162</port>
    <local-address></local-address>
    <local-port></local-port>
    <version>3</version>    
  </manager>  
</manager-list>
											]]>
			</programlisting>
		</section>
		<section id="configuration_and_running_users">
			<title>Users</title>
			<para>This file(<filename>users.xml</filename>) defines users credentials for managers which use V3 of SNMP. Root element of this file is <literal>user-list</literal>. It contains list of 
			<literal>user</literal> XML nodes. Each defines single user. <literal>user</literal> entry has following children: </para>
			<variablelist>
				<varlistentry>
					<term>securityName</term>
					<listitem>
						<para>its value indicates security name of the user (typically the user name).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>authenticationProtocol</term>
					<listitem>
						<para>its value defines the authentication protocol to be associated with this user (MD5 or SHA). If not set, this user only supports unauthenticated messages.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>authenticationPassphrase</term>
					<listitem>
						<para>its value defines password. If present, the authentication Protocol must also be present. RFC3414 §11.2 requires passphrases to have a minimum length of 8 bytes. If the length is less than 8 bytes an IllegalArgumentException will be thrown.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>privacyProtocol</term>
					<listitem>
						<para>its value indicates the privacy protcol ID to be associated with this user (DES, 3DES, AES128, AES192, AES256). If not set, this user only supports unencrypted messages.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>privacyPassphrase</term>
					<listitem>
						<para>if present, the privacyProtocol must also be set. RFC3414 §11.2 requires passphrases to have a minimum length of 8 bytes. If the length is less than 8 bytes an IllegalArgumentException will be thrown.</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>Example content may look like:</para>
			<programlisting language="XML" role="XML"><![CDATA[
<user-list>
  <!--
    A default user.
  -->
  <user>
    <securityName>TEST</securityName>
    <authenticationProtocol>MD5</authenticationProtocol>
    <authenticationPassphrase>maplesyrup</authenticationPassphrase>
    <privacyProtocol>DES</privacyProtocol>
    <privacyPassphrase>maplesyrup</privacyPassphrase>
  </user>
  <user>
    <securityName>myuser</securityName>
    <authenticationProtocol>MD5</authenticationProtocol>
    <authenticationPassphrase>password</authenticationPassphrase>
    <privacyProtocol>DES</privacyProtocol>
    <privacyPassphrase>password</privacyPassphrase>
  </user>
</user-list>
											]]>
			</programlisting>
		</section>
		<section id="configuration_and_running_attributes">
			<title>Attributes</title>
			<para>This file(<filename>attributes.xml</filename>) controls the mapping of JMX mbean attributes to <literal>SNMP</literal> <literal>OID</literal>. 
			Root element of this file is <literal>attribute-mappings</literal>, it supports single type of child elements: <literal>mbean</literal>. Each child defines
			<literal>JMX</literal> mbean which is mapped.
			The <literal>mbean</literal> element supports following attributes: 
			</para>
			<itemizedlist>
				<listitem>
					<para>name - JMX name of bean, ie. <literal>javax.slee.management:name=SleeManagement</literal> </para>
				</listitem>
				<listitem>
					<para>oid-prefix - optional OID. If present, it is prepended to attribute <literal>OID</literal> </para>
				</listitem>
			</itemizedlist>
			<para>The <literal>mbean</literal> element, supports single type of child element: <literal>attribute</literal>. Which in turn supports following attributes: </para>
			<itemizedlist>
				<listitem>
					<para>name - matches bean attribute name( without get/set prefix)</para>
				</listitem>
				<listitem>
					<para>oid - OID suffix. Identifies this attribute in <literal>SNMP</literal> world</para>
				</listitem>
				<listitem>
					<para>table - boolean attribute indicating if mbean attribute is of array/collection type. This supports only java basic types, if non basic type is accessed, the .toString() method is called to convert.
					Note that if attribute is of table type, <literal>oid</literal> must be suffixed with '<literal>.1</literal>' </para>
				</listitem>
				<listitem>
					<para>mode - indicates access type to mbean attribute, default value is 'ro'(read-only), it is possible to specify 'rw'(read-write).</para>
				</listitem>
				<listitem>
					<para>max-access - indicates access rights to mbean attribute from managers, default value is 'read-only', it is possible to specify 'read-write' or 'no-access'.</para>
				</listitem>
				<listitem>
					<para>snmp-type - optional attribute, used by mib generator to give a hint on data type. Default value is '<literal>OCTET STRING (SIZE(0..255))</literal>'.
					Following values are permited: OCTET STRING, BIT STRING, IpAddress, NsapAddress, Counter32, Gauge32, TimeTicks, Counter64, UInteger32. For full list refer to 
					<ulink url="http://www.faqs.org/rfcs/rfc1442.html">rfc1442</ulink>.</para>
				</listitem>
				<!-- TODO: add rest of MIB gen specific ? -->
				
			</itemizedlist>
			<para>Example content is listed below:</para>
			<programlisting language="XML" role="XML"><![CDATA[
<attribute-mappings>
   <mbean name="javax.slee.management:name=SleeManagement" oid-prefix=".1.3.6.1.4.1.2312.101.1.100.1" definition-name="sleeManagement">
      <attribute name="State" oid=".1" mode="r" snmp-type="OCTET STRING"/>/>
      <attribute name="SleeName" oid=".2" mode="r" snmp-type="OCTET STRING"/>/>
      <attribute name="SleeVendor" oid=".3" mode="r" snmp-type="OCTET STRING"/>/>
      <attribute name="SleeVersion" oid=".4" mode="r" snmp-type="OCTET STRING"/>/>
      <attribute name="Subsystems" oid=".5.1" mode="r" table="true"/>
   </mbean>
   
   <mbean name="javax.slee.management:name=Alarm" oid-prefix=".1.3.6.1.4.1.2312.101.1.100.2" definition-name="alarmManagement">
      <attribute name="Alarms" oid=".1" mode="r" table="true"/>
   </mbean>
</attribute-mappings>
]]>
			</programlisting>
		</section>
		<section id="configuration_and_running_notifications">
			<title>Notification</title>
			<para>This file(<filename>notifications.xml</filename>) controls how <literal>JMX</literal> notifications are converted into <literal>SNMP</literal>  trap or info.
			Root element of this file is <literal>notification-map-list</literal>. It supports single type fo child elements: <literal>mapping</literal>.
			Each <literal>mapping</literal> element, declares how notification should be converted to <literal>SNMP</literal> representation.
			The <literal>mapping</literal> supports following attributes:
			
			</para>
			<itemizedlist>
				<listitem>
					<para>notification-type - declares type of notification. It contains regular expression which is used to match <literal>JMXNotification.getType()</literal>. For instance to match all alarm notifications, value could be '<literal>javax.slee.management.alarm.*</literal>' </para>
				</listitem>
				<listitem>
					<para>enterprise - the OID value which MUST match OID of bean emiting this notification. This bean MUST be defined in <filename>attributes.xml</filename>. </para>
				</listitem>
				<listitem>
					<para>generic - integer value. It identifies generic type of <literal>SNMP</literal> trap. </para>
				</listitem>
				<listitem>
					<para>specific - integer value. It identifies specific type of <literal>SNMP</literal> trap.</para>
				</listitem>
				<listitem>
					<para>inform - boolean value, if set to 'true', adaptor will send <literal>info</literal> instead of <literal>trap</literal>.</para>
				</listitem>
				<listitem>
					<para>security-name - string matching user name, defined in <filename>users.xml</filename>. It is used only V3 of protocol.</para>
				</listitem>
			</itemizedlist>
			<para>
			The <literal>mapping</literal> supports single type of child element: <literal>var-bind-list</literal>.
			The <literal>var-bind-list</literal> defines notification variable binding. It supports single attribute: <literal>wrapper-class</literal>. It declares notification handlers class. By default, it should be set to <classname>org.jboss.jmx.adaptor.snmp.agent.NotificationWrapperSupport</classname>.
			The <literal>var-bind-list</literal> supports single type of child elements: <literal>var-bind</literal>.
			The <literal>var-bind</literal> declares specific variable binding. Binding data is declared in <literal>var-bind</literal> attributes. It supports following attributes:
			</para>
			<itemizedlist>
				<listitem>
					<para>tag - value which is used by trap generator to access value of this variable. Tag starts with one of following prefixes:</para>
					<variablelist>
						<varlistentry>
							<term>a:</term>
							<listitem>
								<para>resevered for bindings of mbean attributes. Rest of tag must match mbean attribute name defined in <filename>attributes.xml</filename>. For instance '<literal>a:startTime</literal>' MUST match attribute with name '<literal>startTime</literal>'.</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>n:</term>
							<listitem>
								<para>reserved for notification attributes(getX). For example '<literal>n:oldState</literal>'. If this prefix is used, the '<literal>oid</literal>' will create new definition in MIB.  </para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>u:</term>
							<listitem>
								<para>reserved for user data. The '<literal>u:key</literal>' will be looked up in notification user defined data. If this prefix is used, the '<literal>oid</literal>' will create new definition in MIB.  </para>
							</listitem>
						</varlistentry>
					</variablelist>
				</listitem>
				<listitem>
					<para>oid - identifier of this variable. In case tag starts with '<literal>a:</literal>' it has to match bean attribute OID(name must also match bean attribute name).</para>
				</listitem>
				<listitem>
					<para>type - declares type of this variable, it has exactly the same meaning as '<literal>snmp-type</literal>'.</para>
				</listitem>
			</itemizedlist>
			<para>By default, adaptor converts following data:</para>
			<variablelist>
				<varlistentry>
					<term>n:message</term>
					<listitem>
						<para>javax.management.Notification.getMessage()</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>n:sequenceNumber</term>
					<listitem>
						<para>javax.management.Notification.getSequenceNumber()</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>n:timeStamp</term>
					<listitem>
						<para>javax.management.Notification.getTimestamp()</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>n:type</term>
					<listitem>
						<para>javax.management.Notification.getType()</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>n:all</term>
					<listitem>
						<para>javax.management.Notification.toString()</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>n:class</term>
					<listitem>
						<para>javax.management.Notification.getClass().getName()</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>a:startTime</term>
					<listitem>
						<para>snmp agent/adaptor start time</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>a:uptime</term>
					<listitem>
						<para>snmp agent/adaptor up time</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>a:trapCount</term>
					<listitem>
						<para>snmp agent/adaptor trap count</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<note>
				<para>Above prefix and tag pairs are RESERVED!</para>
			</note>
			<para>Example file entry looks as follows:</para>
			<programlisting language="XML" role="XML"><![CDATA[
<notification-map-list>

  <mapping name="sleeManagementNotifications" notification-type="javax.slee.management.sleestatechange" generic="6" specific="10" enterprise=".1.3.6.1.4.1.2312.101.1.100.1" definition-name="sleeManagementNotifications" security-name="TEST">
    <var-bind-list wrapper-class="org.mobicents.slee.tools.snmp.SleeStateNotificationWrapperSupport">
    	<var-bind tag="n:oldState" oid="1.3.6.1.4.1.2312.101.1.100.1.101" type="OCTET STRING"/>
      	<var-bind tag="n:newState" oid="1.3.6.1.4.1.2312.101.1.100.1.102" type="OCTET STRING"/>
    </var-bind-list>               
  </mapping>

  <mapping name="alarmFacilityNotifications" notification-type="javax.slee.management.alarm.*" generic="6" specific="11" enterprise=".1.3.6.1.4.1.2312.101.1.100.2" definition-name="alarmFacilityNotifications" security-name="TEST">
    <var-bind-list wrapper-class="org.mobicents.slee.tools.snmp.AlarmNotificationWrapperSupport"> 
      <var-bind tag="n:source" oid="1.3.6.1.4.1.2312.101.1.100.2.101" type="OCTET STRING"/>
      <var-bind tag="n:level" oid="1.3.6.1.4.1.2312.101.1.100.2.102" type="OCTET STRING"/>
      <var-bind tag="n:instanceId" oid="1.3.6.1.4.1.2312.101.1.100.2.103" type="OCTET STRING"/>
      <var-bind tag="n:id" oid="1.3.6.1.4.1.2312.101.1.100.2.104" type="OCTET STRING"/>
      <var-bind tag="n:type" oid="1.3.6.1.4.1.2312.101.1.100.105" type="OCTET STRING"/>
    </var-bind-list>               
  </mapping>
  
</notification-map-list>
]]>
			</programlisting>
		</section>
	</section>		
	
	<section id="using">
		<title>Using &THIS.PLATFORM; SNMP Adaptor</title>
		<para>There are various <acronym>SNMP</acronym> tools available. Depending on the tool and OS, it requires different setup. For test purpose following snippets assume that
		<ulink url="http://www.net-snmp.org/">net-snmp</ulink> is installed. Follow instructions:</para>
		<variablelist>
			<varlistentry>
				<term>Create manager entry</term>
				<listitem>
					<para>Create <acronym>XML</acronym> entries in <filename>managers.xml</filename>. It should point to where your maanger program will be running.
					Default entries should work for <literal>localhost</literal>. </para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Create user in adaptor</term>
				<listitem>
					<para>Create <acronym>XML</acronym> entries in <filename>users.xml</filename> as follows: </para>
					<programlisting language="XML" role="XML"><![CDATA[
<user-list>
  <!--
    A default user.
  -->
  <user>
    <securityName>TEST</securityName>
    <authenticationProtocol>MD5</authenticationProtocol>
    <authenticationPassphrase>maplesyrup</authenticationPassphrase>
    <privacyProtocol>DES</privacyProtocol>
    <privacyPassphrase>maplesyrup</privacyPassphrase>
  </user>
</user-list>
											]]>
			</programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Create user in SNMP tool</term>
				<listitem>
					<programlisting>
net-snmp-config --create-snmpv3-user -a maplesyrup TEST
					</programlisting>
					<para>Note, that depending on OS, file location and way of invoking this command may differ.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Auth user in SNMP tool</term>
				<listitem>
					<para>Edit <filename>snmptrapd.conf</filename> file (once again, location of proper file may vary). Make it look as follows:</para>
					<programlisting>
#User to receive TRAP
createUser -e 0x80001370017F000101 TEST MD5 maplesyrup DES maplesyrup
#User to receive INFORM
createUser myuser MD5 password DES password
#Those make snmptrapd log the TRAPs and INFORM to the console
authUser log,execute,net TEST
authUser log,execute,net myuser
					</programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term></term>
				<listitem>
					<para>Ensure which directories are used to store <acronym>MIB</acronym> files.</para>
					<programlisting>
net-snmp-config --default-mibdirs
					</programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Copy <acronym>MIB</acronym>s </term>
				<listitem>
					<para>Copy <literal>mib</literal> files from adaptor or location where they were generated, to directories where tool reads <literal>mib</literal>s from. </para>
				</listitem>
			</varlistentry>
		</variablelist>
	
	</section>
	
</chapter>